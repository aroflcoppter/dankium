From 8da1ecd4dc3569080a639353a0d8a30e6f7adc94 Mon Sep 17 00:00:00 2001
From: Krystian Zlomek <k.zlomek@eyeo.com>
Date: Wed, 11 Jun 2025 11:25:22 +0000
Subject: [PATCH] DPD-3382: Fixed incognito crashes
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- Fixed logic to avoid NPE in incognito mode when trying to get an instance of our service
  - Enabled chrome internals in incognito mode
  - EH(E) notifications now working in incognito mode
- Fixed content BTs in incognito mode: the CLI switch does not work for shell() as it worked for chrome()
- UpdatedÂ several BTs to run in both modes
---
 ...ock_frame_hierarchy_builder_browsertest.cc | 77 +++++++++++++-----
 .../test/adblock_multiple_tabs_browsertest.cc |  5 +-
 .../adblock/test/adblock_popup_browsertest.cc |  7 +-
 .../browser/adblock_content_browser_client.h  | 14 +++-
 .../adblock_web_ui_controller_factory.cc      |  2 +-
 .../browser/element_hide_api_handler.cc       | 25 +++---
 .../browser/element_hide_api_handler.h        | 11 ++-
 .../adblock_request_throttle_factory.cc       |  3 -
 .../adblock_telemetry_service_factory.cc      |  3 -
 ...ontent_security_policy_injector_factory.cc |  3 -
 .../factories/element_hider_factory.cc        |  7 +-
 .../resource_classification_runner_factory.cc |  3 -
 .../factories/session_stats_factory.cc        |  3 -
 .../factories/sitekey_storage_factory.cc      |  3 -
 ...ubscription_persistent_metadata_factory.cc |  3 -
 .../factories/subscription_service_factory.cc |  3 -
 .../adblock_acceptable_ads_browsertest.cc     |  5 +-
 .../browser/test/adblock_browsertest_base.cc  | 12 +++
 .../browser/test/adblock_browsertest_base.h   |  5 ++
 .../adblock_content_filters_browsertest.cc    | 33 +++++---
 .../test/adblock_debug_url_browsertest.cc     | 25 +++---
 ...ck_filtering_configurations_browsertest.cc | 78 +++++++++++--------
 .../test/adblock_web_ui_browsertest.cc        | 22 +++---
 .../adblock/adblock_shell_browser_context.cc  |  9 +--
 .../adblock/adblock_shell_browser_context.h   |  4 +-
 .../adblock_shell_content_browser_client.cc   |  6 +-
 content/shell/browser/shell.cc                | 11 ++-
 .../shell/browser/shell_browser_main_parts.cc |  4 +-
 28 files changed, 226 insertions(+), 160 deletions(-)

diff --git a/chrome/browser/adblock/test/adblock_frame_hierarchy_builder_browsertest.cc b/chrome/browser/adblock/test/adblock_frame_hierarchy_builder_browsertest.cc
index 448b37077bc93..ae24f1f68f791 100644
--- a/chrome/browser/adblock/test/adblock_frame_hierarchy_builder_browsertest.cc
+++ b/chrome/browser/adblock/test/adblock_frame_hierarchy_builder_browsertest.cc
@@ -125,6 +125,20 @@ class ResourceClassificationRunnerObserver
     }
   }
 
+  void OnPageElementMatched(
+      const std::string& selector,
+      adblock::ElementHideAction action,
+      content::RenderFrameHost* render_frame_host) override {
+    auto it = std::find(hidden_notifications.begin(),
+                        hidden_notifications.end(), selector);
+    ASSERT_FALSE(it == hidden_notifications.end())
+        << "Selector " << selector << " not on list";
+    hidden_notifications.erase(it);
+    if (hidden_notifications.empty() && eh_quit_closure_) {
+      eh_quit_closure_.Run();
+    }
+  }
+
   void VerifyNotificationSent(std::string_view path, std::vector<GURL>& list) {
     auto it = std::ranges::find(list, path, &GURL::ExtractFileName);
     ASSERT_FALSE(it == list.end()) << "Path " << path << " not on list";
@@ -139,6 +153,7 @@ class ResourceClassificationRunnerObserver
     EXPECT_TRUE(blocked_popups_notifications.empty());
     EXPECT_TRUE(allowed_popups_notifications.empty());
     EXPECT_TRUE(allowed_pages_notifications.empty());
+    EXPECT_TRUE(hidden_notifications.empty());
   }
 
   std::vector<GURL> blocked_ads_notifications;
@@ -146,7 +161,9 @@ class ResourceClassificationRunnerObserver
   std::vector<GURL> allowed_pages_notifications;
   std::vector<std::string> blocked_popups_notifications;
   std::vector<std::string> allowed_popups_notifications;
+  std::vector<std::string> hidden_notifications;
   std::unique_ptr<base::RunLoop> popup_notifications_run_loop_;
+  base::RepeatingClosure eh_quit_closure_;
 };
 
 // Simulated setup:
@@ -159,7 +176,9 @@ class ResourceClassificationRunnerObserver
 // distribution is simulated via SetupCrossSiteRedirector. innermost_frame.html
 // reports whether resource.png is visible via window.top.postMessage to
 // outermost_frame.html, which stores a global subresource_visible JS variable.
-class AdblockFrameHierarchyBrowserTest : public InProcessBrowserTest {
+class AdblockFrameHierarchyBrowserTest
+    : public InProcessBrowserTest,
+      public testing::WithParamInterface<bool> {
  public:
   void SetUpOnMainThread() override {
     InProcessBrowserTest::SetUpOnMainThread();
@@ -167,30 +186,37 @@ class AdblockFrameHierarchyBrowserTest : public InProcessBrowserTest {
     embedded_test_server()->ServeFilesFromSourceDirectory(
         "components/test/data/adblock");
     content::SetupCrossSiteRedirector(embedded_test_server());
-    AllowHttpForHostnamesForTesting({"outer.com", "inner.com", "middle.com"},
-                                    browser()->profile()->GetPrefs());
+    AllowHttpForHostnamesForTesting(
+        {"outer.com", "inner.com", "middle.com"},
+        browser()->profile()->GetOriginalProfile()->GetPrefs());
     ASSERT_TRUE(embedded_test_server()->Start());
     auto* classification_runner =
         ResourceClassificationRunnerFactory::GetForBrowserContext(
-            browser()->profile());
+            browser()->profile()->GetOriginalProfile());
     classification_runner->AddObserver(&observer);
   }
 
   void TearDownOnMainThread() override {
     auto* classification_runner =
         ResourceClassificationRunnerFactory::GetForBrowserContext(
-            browser()->profile());
+            browser()->profile()->GetOriginalProfile());
     classification_runner->RemoveObserver(&observer);
     InProcessBrowserTest::TearDownOnMainThread();
   }
 
+  bool IncognitoMode() { return GetParam(); }
+
   void SetUpCommandLine(base::CommandLine* command_line) override {
     command_line->AppendSwitch(embedder_support::kDisablePopupBlocking);
+    if (IncognitoMode()) {
+      command_line->AppendSwitch("incognito");
+    }
   }
 
   void SetFilters(std::vector<std::string> filters) {
     auto* adblock_configuration =
-        SubscriptionServiceFactory::GetForBrowserContext(browser()->profile())
+        SubscriptionServiceFactory::GetForBrowserContext(
+            browser()->profile()->GetOriginalProfile())
             ->GetFilteringConfiguration(kAdblockFilteringConfigurationName);
     adblock_configuration->RemoveCustomFilter(kAllowlistEverythingFilter);
     for (auto& filter : filters) {
@@ -264,14 +290,14 @@ class AdblockFrameHierarchyBrowserTest : public InProcessBrowserTest {
   ResourceClassificationRunnerObserver observer;
 };
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest,
                        SubresourceShownWithNoFilters) {
   SetFilters({});
   NavigateToOutermostFrame();
   VerifyTargetResourceBlockingStatus(true);
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, SubresourceBlocked) {
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest, SubresourceBlocked) {
   SetFilters({"/resource.png"});
   NavigateToOutermostFrame();
   VerifyTargetResourceBlockingStatus(false);
@@ -279,7 +305,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, SubresourceBlocked) {
                                   observer.blocked_ads_notifications);
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest,
                        SubresourceAllowedViaInnerFrame) {
   SetFilters({"/resource.png", "@@||inner.com^$document"});
   NavigateToOutermostFrame();
@@ -288,7 +314,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
                                   observer.allowed_ads_notifications);
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest,
                        SubresourceAllowedViaMiddleFrame) {
   SetFilters({"/resource.png", "@@||middle.com^$document"});
   NavigateToOutermostFrame();
@@ -297,7 +323,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
                                   observer.allowed_ads_notifications);
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest,
                        SubresourceAllowedViaOutermostFrame) {
   SetFilters({"/resource.png", "@@||outer.com^$document"});
   NavigateToOutermostFrame();
@@ -308,7 +334,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
                                   observer.allowed_pages_notifications);
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest,
                        SubresourceBlockedWhenInvalidAllowRule) {
   SetFilters({"/resource.png", "@@||bogus.com^$document"});
   NavigateToOutermostFrame();
@@ -317,7 +343,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
                                   observer.blocked_ads_notifications);
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest,
                        DISABLED_PopupHandledByChromiumWithoutFilters) {
   // Without any popup-specific filters, blocking popups is handed over to
   // Chromium, which has it's own heuristics that are not based on filters.
@@ -331,7 +357,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
                     ->GetBlockedPopupsCount());
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, PopupBlockedByFilter) {
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest, PopupBlockedByFilter) {
   SetFilters({"http://inner.com*/popup.html$popup"});
   observer.blocked_popups_notifications.emplace_back("popup.html");
   TabAddedRemovedObserver observer(browser()->tab_strip_model());
@@ -340,7 +366,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, PopupBlockedByFilter) {
   EXPECT_EQ(1, NumberOfOpenTabs());
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, PopupAllowedByFilter) {
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest, PopupAllowedByFilter) {
   SetFilters({"http://inner.com*/popup.html$popup",
               "@@http://inner.com*/popup.html$popup"});
   observer.allowed_popups_notifications.emplace_back("popup.html");
@@ -349,7 +375,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, PopupAllowedByFilter) {
   EXPECT_EQ(2, NumberOfOpenTabs());
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest,
                        PopupAllowedByDomainSpecificFilter) {
   // The frame that wants to open the popup is hosted on middle.com.
   // The $popup allow rule applies to that frame.
@@ -361,7 +387,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
   EXPECT_EQ(2, NumberOfOpenTabs());
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest,
                        PopupNotAllowedByDomainSpecificFilter) {
   // The frame that wants to open the popup is hosted on middle.com.
   // The $popup allow rule does not apply because it is specific to outer.com.
@@ -375,7 +401,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
   EXPECT_EQ(1, NumberOfOpenTabs());
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest,
                        PopupAllowedByParentDocument) {
   // The outermost frame has a blanket allowing rule of $document type.
   SetFilters({"http://inner.com*/popup.html$popup",
@@ -388,7 +414,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
                                   observer.allowed_pages_notifications);
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest,
                        PopupAllowedByIntermediateParentDocument) {
   // The middle frame has a blanket allowing rule of $document type.
   SetFilters({"http://inner.com*/popup.html$popup",
@@ -399,7 +425,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest,
   EXPECT_EQ(2, NumberOfOpenTabs());
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, BlankFrameHiding) {
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest, BlankFrameHiding) {
   SetFilters({"##.about_blank_div"});
   NavigateToOutermostFrameWithAboutBlank();
   std::string script = R"(
@@ -422,8 +448,13 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, BlankFrameHiding) {
       document.getElementById("about_blank").addEventListener("load", writeIframe);
     }
   )";
+  observer.hidden_notifications.emplace_back(
+      "type:div;className:about_blank_div");
   EXPECT_TRUE(content::ExecJs(
       browser()->tab_strip_model()->GetActiveWebContents(), script));
+  base::RunLoop run_loop;
+  observer.eh_quit_closure_ = run_loop.QuitClosure();
+  std::move(run_loop).Run();
   VerifyTargetResourceHidingStatus(false);
   SetFilters({"@@^eyeo=true$document"});
   NavigateToOutermostFrameWithAboutBlank();
@@ -432,7 +463,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, BlankFrameHiding) {
   VerifyTargetResourceHidingStatus(true);
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, BlankFrameBlocking) {
+IN_PROC_BROWSER_TEST_P(AdblockFrameHierarchyBrowserTest, BlankFrameBlocking) {
   SetFilters({"/resource.png"});
   NavigateToOutermostFrameWithAboutBlank();
   std::string script = R"(
@@ -467,6 +498,10 @@ IN_PROC_BROWSER_TEST_F(AdblockFrameHierarchyBrowserTest, BlankFrameBlocking) {
                                   observer.allowed_ads_notifications);
 }
 
+INSTANTIATE_TEST_SUITE_P(All,
+                         AdblockFrameHierarchyBrowserTest,
+                         testing::Values(false /*normal*/, true /*incognito*/));
+
 // More tests can be added / parametrized, e.g.:
 // - elemhide blocking filters (in conjunction with $elemhide allow rules)
 // - $subdocument-based allow rules
diff --git a/chrome/browser/adblock/test/adblock_multiple_tabs_browsertest.cc b/chrome/browser/adblock/test/adblock_multiple_tabs_browsertest.cc
index eb0f954743085..e912095245e42 100644
--- a/chrome/browser/adblock/test/adblock_multiple_tabs_browsertest.cc
+++ b/chrome/browser/adblock/test/adblock_multiple_tabs_browsertest.cc
@@ -44,7 +44,7 @@ class AdblockMultipleTabsBrowserTest
         "components/test/data/adblock");
     ASSERT_TRUE(embedded_test_server()->Start());
     ResourceClassificationRunnerFactory::GetForBrowserContext(
-        browser()->profile())
+        browser()->profile()->GetOriginalProfile())
         ->AddObserver(this);
     SetFilters({"blocked.png", "allowed.png", "@@allowed.png"});
   }
@@ -56,7 +56,8 @@ class AdblockMultipleTabsBrowserTest
 
   void SetFilters(std::vector<std::string> filters) {
     auto* adblock_configuration =
-        SubscriptionServiceFactory::GetForBrowserContext(browser()->profile())
+        SubscriptionServiceFactory::GetForBrowserContext(
+            browser()->profile()->GetOriginalProfile())
             ->GetFilteringConfiguration(kAdblockFilteringConfigurationName);
     adblock_configuration->RemoveCustomFilter(kAllowlistEverythingFilter);
     for (auto& filter : filters) {
diff --git a/chrome/browser/adblock/test/adblock_popup_browsertest.cc b/chrome/browser/adblock/test/adblock_popup_browsertest.cc
index 7b3c1f9509711..4c7dd362e763a 100644
--- a/chrome/browser/adblock/test/adblock_popup_browsertest.cc
+++ b/chrome/browser/adblock/test/adblock_popup_browsertest.cc
@@ -92,14 +92,14 @@ class AdblockPopupBrowserTest
         &AdblockPopupBrowserTest::RequestHandler, base::Unretained(this)));
     ASSERT_TRUE(embedded_test_server()->Start());
     ResourceClassificationRunnerFactory::GetForBrowserContext(
-        browser()->profile())
+        browser()->profile()->GetOriginalProfile())
         ->AddObserver(this);
   }
 
   void TearDownOnMainThread() override {
     VerifyNoUnexpectedNotifications();
     ResourceClassificationRunnerFactory::GetForBrowserContext(
-        browser()->profile())
+        browser()->profile()->GetOriginalProfile())
         ->RemoveObserver(this);
     InProcessBrowserTest::TearDownOnMainThread();
   }
@@ -202,7 +202,8 @@ class AdblockPopupBrowserTest
 
   void SetFilters(std::vector<std::string> filters) {
     auto* adblock_configuration =
-        SubscriptionServiceFactory::GetForBrowserContext(browser()->profile())
+        SubscriptionServiceFactory::GetForBrowserContext(
+            browser()->profile()->GetOriginalProfile())
             ->GetFilteringConfiguration(kAdblockFilteringConfigurationName);
     adblock_configuration->RemoveCustomFilter(kAllowlistEverythingFilter);
     for (auto& filter : filters) {
diff --git a/components/adblock/content/browser/adblock_content_browser_client.h b/components/adblock/content/browser/adblock_content_browser_client.h
index 346df4356e34e..b88fbcbcf90a9 100644
--- a/components/adblock/content/browser/adblock_content_browser_client.h
+++ b/components/adblock/content/browser/adblock_content_browser_client.h
@@ -54,9 +54,11 @@ namespace adblock {
 
 namespace {
 void BindElementHideApiHandler(
+    base::RepeatingCallback<content::BrowserContext*(content::BrowserContext*)>
+        context_mapper,
     content::RenderFrameHost* const frame_host,
     mojo::PendingReceiver<mojom::ElementHideApi> receiver) {
-  ElementHideApiHandler::CreateAndBindElementHideApi(frame_host,
+  ElementHideApiHandler::CreateAndBindElementHideApi(context_mapper, frame_host,
                                                      std::move(receiver));
 }
 }  //  namespace
@@ -216,8 +218,14 @@ void AdblockContentBrowserClient<ContentBrowserClientBase>::
     RegisterBrowserInterfaceBindersForFrame(
         content::RenderFrameHost* render_frame_host,
         mojo::BinderMapWithContext<content::RenderFrameHost*>* map) {
-  map->Add<adblock::mojom::ElementHideApi>(
-      base::BindRepeating(&BindElementHideApiHandler));
+  // Using base::Unretained(this) instead of weak_factory_.GetWeakPtr() due
+  // to assert: `WeakPtrs can only bind to methods without return values`.
+  map->Add<adblock::mojom::ElementHideApi>(base::BindRepeating(
+      &BindElementHideApiHandler,
+      base::BindRepeating(
+          &AdblockContentBrowserClient<
+              ContentBrowserClientBase>::GetBrowserContextForEyeoFactories,
+          base::Unretained(this))));
   ContentBrowserClientBase::RegisterBrowserInterfaceBindersForFrame(
       render_frame_host, map);
   content::RegisterWebUIControllerInterfaceBinder<
diff --git a/components/adblock/content/browser/adblock_web_ui_controller_factory.cc b/components/adblock/content/browser/adblock_web_ui_controller_factory.cc
index 66f5f4b9b264b..01a817e5bc035 100644
--- a/components/adblock/content/browser/adblock_web_ui_controller_factory.cc
+++ b/components/adblock/content/browser/adblock_web_ui_controller_factory.cc
@@ -32,7 +32,7 @@ AdblockWebUIControllerFactory* AdblockWebUIControllerFactory::GetInstance() {
 content::WebUI::TypeID AdblockWebUIControllerFactory::GetWebUIType(
     content::BrowserContext* browser_context,
     const GURL& url) {
-  if (!content::HasWebUIScheme(url) || browser_context->IsOffTheRecord()) {
+  if (!content::HasWebUIScheme(url)) {
     return content::WebUI::kNoWebUI;
   }
 
diff --git a/components/adblock/content/browser/element_hide_api_handler.cc b/components/adblock/content/browser/element_hide_api_handler.cc
index b7ef483fccee4..cdd3adf958332 100644
--- a/components/adblock/content/browser/element_hide_api_handler.cc
+++ b/components/adblock/content/browser/element_hide_api_handler.cc
@@ -32,22 +32,29 @@
 
 namespace adblock {
 
-ElementHideApiHandler::ElementHideApiHandler(int render_process_id,
-                                             int render_frame_id)
-    : render_process_id_(render_process_id),
+ElementHideApiHandler::ElementHideApiHandler(
+    base::RepeatingCallback<content::BrowserContext*(content::BrowserContext*)>
+        context_mapper,
+    int render_process_id,
+    int render_frame_id)
+    : context_mapper_(context_mapper),
+      render_process_id_(render_process_id),
       render_frame_id_(render_frame_id) {}
 
 ElementHideApiHandler::~ElementHideApiHandler() = default;
 
 // static
 void ElementHideApiHandler::CreateAndBindElementHideApi(
+    base::RepeatingCallback<content::BrowserContext*(content::BrowserContext*)>
+        context_mapper,
     content::RenderFrameHost* frame_host,
     mojo::PendingReceiver<mojom::ElementHideApi> receiver) {
   int render_process_id = frame_host->GetProcess()->GetDeprecatedID();
   int render_frame_id = frame_host->GetRoutingID();
-  mojo::MakeSelfOwnedReceiver(base::WrapUnique(new ElementHideApiHandler(
-                                  render_process_id, render_frame_id)),
-                              std::move(receiver));
+  mojo::MakeSelfOwnedReceiver(
+      base::WrapUnique(new ElementHideApiHandler(
+          context_mapper, render_process_id, render_frame_id)),
+      std::move(receiver));
 }
 
 void ElementHideApiHandler::LogSelectors(
@@ -60,12 +67,10 @@ void ElementHideApiHandler::LogSelectors(
     // The frame has been destroyed, so we can't notify observers.
     return;
   }
-  if (rfh->GetBrowserContext()->IsOffTheRecord()) {
-    return;
-  }
   auto* rcr = static_cast<ResourceClassificationRunnerImpl*>(
       ResourceClassificationRunnerFactory::GetForBrowserContext(
-          rfh->GetBrowserContext()));
+          context_mapper_.Run(rfh->GetBrowserContext())));
+  DCHECK(rcr);
   for (const auto& selector : selectors) {
     rcr->NotifyPageElementMatched(selector,
                                   static_cast<ElementHideAction>(action), rfh);
diff --git a/components/adblock/content/browser/element_hide_api_handler.h b/components/adblock/content/browser/element_hide_api_handler.h
index 604777b02f4c7..d3f39083a5278 100644
--- a/components/adblock/content/browser/element_hide_api_handler.h
+++ b/components/adblock/content/browser/element_hide_api_handler.h
@@ -21,7 +21,9 @@
 #include <string>
 #include <vector>
 
+#include "base/functional/callback.h"
 #include "components/adblock/content/common/element_hide_api.mojom.h"
+#include "content/public/browser/browser_context.h"
 
 namespace content {
 class RenderFrameHost;
@@ -37,6 +39,8 @@ class ElementHideApiHandler : public mojom::ElementHideApi {
   ~ElementHideApiHandler() override;
 
   static void CreateAndBindElementHideApi(
+      base::RepeatingCallback<
+          content::BrowserContext*(content::BrowserContext*)> context_mapper,
       content::RenderFrameHost* frame_host,
       mojo::PendingReceiver<mojom::ElementHideApi> receiver);
 
@@ -45,7 +49,12 @@ class ElementHideApiHandler : public mojom::ElementHideApi {
                     const std::vector<std::string>& selectors) override;
 
  private:
-  ElementHideApiHandler(int render_process_id, int render_frame_id);
+  ElementHideApiHandler(base::RepeatingCallback<content::BrowserContext*(
+                            content::BrowserContext*)> context_mapper,
+                        int render_process_id,
+                        int render_frame_id);
+  base::RepeatingCallback<content::BrowserContext*(content::BrowserContext*)>
+      context_mapper_;
   const int render_process_id_;
   const int render_frame_id_;
 };
diff --git a/components/adblock/content/browser/factories/adblock_request_throttle_factory.cc b/components/adblock/content/browser/factories/adblock_request_throttle_factory.cc
index 84fb86da428ce..54ed7b3936cde 100644
--- a/components/adblock/content/browser/factories/adblock_request_throttle_factory.cc
+++ b/components/adblock/content/browser/factories/adblock_request_throttle_factory.cc
@@ -63,9 +63,6 @@ AdblockRequestThrottleFactory::BuildServiceInstanceForBrowserContext(
 
 content::BrowserContext* AdblockRequestThrottleFactory::GetBrowserContextToUse(
     content::BrowserContext* context) const {
-  if (context->IsOffTheRecord()) {
-    return nullptr;
-  }
   return context;
 }
 
diff --git a/components/adblock/content/browser/factories/adblock_telemetry_service_factory.cc b/components/adblock/content/browser/factories/adblock_telemetry_service_factory.cc
index bdff5622b626c..ecec5d51a97ba 100644
--- a/components/adblock/content/browser/factories/adblock_telemetry_service_factory.cc
+++ b/components/adblock/content/browser/factories/adblock_telemetry_service_factory.cc
@@ -73,9 +73,6 @@ AdblockTelemetryServiceFactory::~AdblockTelemetryServiceFactory() = default;
 
 content::BrowserContext* AdblockTelemetryServiceFactory::GetBrowserContextToUse(
     content::BrowserContext* context) const {
-  if (context->IsOffTheRecord()) {
-    return nullptr;
-  }
   return context;
 }
 
diff --git a/components/adblock/content/browser/factories/content_security_policy_injector_factory.cc b/components/adblock/content/browser/factories/content_security_policy_injector_factory.cc
index 8923e6c887fb2..d9c3aca04de06 100644
--- a/components/adblock/content/browser/factories/content_security_policy_injector_factory.cc
+++ b/components/adblock/content/browser/factories/content_security_policy_injector_factory.cc
@@ -62,9 +62,6 @@ ContentSecurityPolicyInjectorFactory::BuildServiceInstanceForBrowserContext(
 content::BrowserContext*
 ContentSecurityPolicyInjectorFactory::GetBrowserContextToUse(
     content::BrowserContext* context) const {
-  if (context->IsOffTheRecord()) {
-    return nullptr;
-  }
   return context;
 }
 
diff --git a/components/adblock/content/browser/factories/element_hider_factory.cc b/components/adblock/content/browser/factories/element_hider_factory.cc
index e49bae1ccfbf2..3bf0003a8f275 100644
--- a/components/adblock/content/browser/factories/element_hider_factory.cc
+++ b/components/adblock/content/browser/factories/element_hider_factory.cc
@@ -42,7 +42,7 @@ ElementHiderFactory::ElementHiderFactory()
     : BrowserContextKeyedServiceFactory(
           "ElementHider",
           BrowserContextDependencyManager::GetInstance()) {
-  DependsOn(adblock::SubscriptionServiceFactory::GetInstance());
+  DependsOn(SubscriptionServiceFactory::GetInstance());
 }
 
 ElementHiderFactory::~ElementHiderFactory() = default;
@@ -51,14 +51,11 @@ std::unique_ptr<KeyedService>
 ElementHiderFactory::BuildServiceInstanceForBrowserContext(
     content::BrowserContext* context) const {
   return std::make_unique<ElementHiderImpl>(
-      adblock::SubscriptionServiceFactory::GetForBrowserContext(context));
+      SubscriptionServiceFactory::GetForBrowserContext(context));
 }
 
 content::BrowserContext* ElementHiderFactory::GetBrowserContextToUse(
     content::BrowserContext* context) const {
-  if (context->IsOffTheRecord()) {
-    return nullptr;
-  }
   return context;
 }
 
diff --git a/components/adblock/content/browser/factories/resource_classification_runner_factory.cc b/components/adblock/content/browser/factories/resource_classification_runner_factory.cc
index e4534a2cab4d8..b09fb4800069d 100644
--- a/components/adblock/content/browser/factories/resource_classification_runner_factory.cc
+++ b/components/adblock/content/browser/factories/resource_classification_runner_factory.cc
@@ -69,9 +69,6 @@ ResourceClassificationRunnerFactory::BuildServiceInstanceForBrowserContext(
 content::BrowserContext*
 ResourceClassificationRunnerFactory::GetBrowserContextToUse(
     content::BrowserContext* context) const {
-  if (context->IsOffTheRecord()) {
-    return nullptr;
-  }
   return context;
 }
 
diff --git a/components/adblock/content/browser/factories/session_stats_factory.cc b/components/adblock/content/browser/factories/session_stats_factory.cc
index 6ffbf52597b67..0f4ebe548b1e7 100644
--- a/components/adblock/content/browser/factories/session_stats_factory.cc
+++ b/components/adblock/content/browser/factories/session_stats_factory.cc
@@ -64,9 +64,6 @@ SessionStatsFactory::BuildServiceInstanceForBrowserContext(
 
 content::BrowserContext* SessionStatsFactory::GetBrowserContextToUse(
     content::BrowserContext* context) const {
-  if (context->IsOffTheRecord()) {
-    return nullptr;
-  }
   return context;
 }
 
diff --git a/components/adblock/content/browser/factories/sitekey_storage_factory.cc b/components/adblock/content/browser/factories/sitekey_storage_factory.cc
index 19b224690d2ed..58f6b5238d063 100644
--- a/components/adblock/content/browser/factories/sitekey_storage_factory.cc
+++ b/components/adblock/content/browser/factories/sitekey_storage_factory.cc
@@ -52,9 +52,6 @@ SitekeyStorageFactory::BuildServiceInstanceForBrowserContext(
 
 content::BrowserContext* SitekeyStorageFactory::GetBrowserContextToUse(
     content::BrowserContext* context) const {
-  if (context->IsOffTheRecord()) {
-    return nullptr;
-  }
   return context;
 }
 
diff --git a/components/adblock/content/browser/factories/subscription_persistent_metadata_factory.cc b/components/adblock/content/browser/factories/subscription_persistent_metadata_factory.cc
index ab55b634f2ff8..70b64e2b957c5 100644
--- a/components/adblock/content/browser/factories/subscription_persistent_metadata_factory.cc
+++ b/components/adblock/content/browser/factories/subscription_persistent_metadata_factory.cc
@@ -57,9 +57,6 @@ SubscriptionPersistentMetadataFactory::BuildServiceInstanceForBrowserContext(
 content::BrowserContext*
 SubscriptionPersistentMetadataFactory::GetBrowserContextToUse(
     content::BrowserContext* context) const {
-  if (context->IsOffTheRecord()) {
-    return nullptr;
-  }
   return context;
 }
 
diff --git a/components/adblock/content/browser/factories/subscription_service_factory.cc b/components/adblock/content/browser/factories/subscription_service_factory.cc
index 26f4243cfab76..6198d3991ea6a 100644
--- a/components/adblock/content/browser/factories/subscription_service_factory.cc
+++ b/components/adblock/content/browser/factories/subscription_service_factory.cc
@@ -427,9 +427,6 @@ SubscriptionServiceFactory::GetSubscriptionPersistentMetadata(
 
 content::BrowserContext* SubscriptionServiceFactory::GetBrowserContextToUse(
     content::BrowserContext* context) const {
-  if (context->IsOffTheRecord()) {
-    return nullptr;
-  }
   return context;
 }
 
diff --git a/components/adblock/content/browser/test/adblock_acceptable_ads_browsertest.cc b/components/adblock/content/browser/test/adblock_acceptable_ads_browsertest.cc
index 3c357ed25d80f..c8d935d9b7a01 100644
--- a/components/adblock/content/browser/test/adblock_acceptable_ads_browsertest.cc
+++ b/components/adblock/content/browser/test/adblock_acceptable_ads_browsertest.cc
@@ -67,9 +67,6 @@ class AdblockAcceptableAdsTest
     if (!AcceptableAdsEnabled()) {
       command_line->AppendSwitch(switches::kDisableAcceptableAds);
     }
-    if (IncognitoMode()) {
-      command_line->AppendSwitch("incognito");
-    }
   }
 
   void WaitUntilSubscriptionsInstalled() {
@@ -171,7 +168,7 @@ class AdblockAcceptableAdsTest
 
   bool DomainAllowlisted() { return std::get<1>(GetParam()); }
 
-  bool IncognitoMode() { return std::get<2>(GetParam()); }
+  bool IncognitoMode() override { return std::get<2>(GetParam()); }
 
  private:
   net::EmbeddedTestServer https_server_;
diff --git a/components/adblock/content/browser/test/adblock_browsertest_base.cc b/components/adblock/content/browser/test/adblock_browsertest_base.cc
index bd7f6f4814b27..48c7b3f06860f 100644
--- a/components/adblock/content/browser/test/adblock_browsertest_base.cc
+++ b/components/adblock/content/browser/test/adblock_browsertest_base.cc
@@ -236,4 +236,16 @@ std::string AdblockBrowserTestBase::GetTelemetryDomain() {
   return domain;
 }
 
+bool AdblockBrowserTestBase::IncognitoMode() {
+  return false;
+}
+
+content::Shell* AdblockBrowserTestBase::shell() {
+  if (!browser_) {
+    browser_ =
+        (IncognitoMode() ? CreateOffTheRecordBrowser() : CreateBrowser());
+  }
+  return browser_;
+}
+
 }  // namespace adblock
diff --git a/components/adblock/content/browser/test/adblock_browsertest_base.h b/components/adblock/content/browser/test/adblock_browsertest_base.h
index 888a1a8eaa234..e59f3f1d529fa 100644
--- a/components/adblock/content/browser/test/adblock_browsertest_base.h
+++ b/components/adblock/content/browser/test/adblock_browsertest_base.h
@@ -125,10 +125,15 @@ class AdblockBrowserTestBase : public content::ContentBrowserTest {
 
   std::string GetTelemetryDomain();
 
+  virtual bool IncognitoMode();
+
+  content::Shell* shell();
+
  protected:
   bool finish_condition_met_ = false;
   base::RepeatingClosure quit_closure_;
   TestResourceClassificationRunnerObserver observer_;
+  raw_ptr<content::Shell, DanglingUntriaged> browser_ = nullptr;
 };
 
 }  // namespace adblock
diff --git a/components/adblock/content/browser/test/adblock_content_filters_browsertest.cc b/components/adblock/content/browser/test/adblock_content_filters_browsertest.cc
index a8799dda27e4a..6af8f4a5e40b4 100644
--- a/components/adblock/content/browser/test/adblock_content_filters_browsertest.cc
+++ b/components/adblock/content/browser/test/adblock_content_filters_browsertest.cc
@@ -25,13 +25,16 @@
 #include "content/public/test/browser_test.h"
 #include "content/public/test/browser_test_utils.h"
 #include "content/public/test/content_browser_test_utils.h"
+#include "content/shell/browser/shell.h"
 #include "net/dns/mock_host_resolver.h"
 #include "net/test/embedded_test_server/embedded_test_server.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
 namespace adblock {
 
-class AdblockContentFiltersBrowserTest : public AdblockBrowserTestBase {
+class AdblockContentFiltersBrowserTest
+    : public AdblockBrowserTestBase,
+      public testing::WithParamInterface<bool> {
  public:
   void SetUpOnMainThread() override {
     AdblockBrowserTestBase::SetUpOnMainThread();
@@ -42,6 +45,8 @@ class AdblockContentFiltersBrowserTest : public AdblockBrowserTestBase {
     InitResourceClassificationObserver();
   }
 
+  bool IncognitoMode() override { return GetParam(); }
+
   GURL GetUrl(const std::string& path) {
     return embedded_test_server()->GetURL("example.com", path);
   }
@@ -109,7 +114,7 @@ class AdblockContentFiltersBrowserTest : public AdblockBrowserTestBase {
   }
 };
 
-IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest, VerifyNoFilters) {
+IN_PROC_BROWSER_TEST_P(AdblockContentFiltersBrowserTest, VerifyNoFilters) {
   ASSERT_TRUE(
       content::NavigateToURL(shell(), GetUrl("/content_type_filters.html")));
   WaitForDynamicContentLoaded();
@@ -121,7 +126,7 @@ IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest, VerifyNoFilters) {
   VerifyCssAppliedForTargets(false, "id_to_apply_style_by_ehe");
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest, VerifyHide) {
+IN_PROC_BROWSER_TEST_P(AdblockContentFiltersBrowserTest, VerifyHide) {
   SetFilters({"example.com##.id_to_elem_hide",
               "example.com#?#span:-abp-contains(id_to_elem_hide_emu)"});
   ASSERT_TRUE(
@@ -141,7 +146,7 @@ IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest, VerifyHide) {
           ":root > BODY:nth-child(2) > DIV:nth-child(3) > SPAN:nth-child(1)"));
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest, VerifyHideException) {
+IN_PROC_BROWSER_TEST_P(AdblockContentFiltersBrowserTest, VerifyHideException) {
   SetFilters({"example.com##.id_to_elem_hide",
               "example.com#?#span:-abp-contains(id_to_elem_hide_emu)",
               "example.com#@#.id_to_elem_hide",
@@ -158,7 +163,7 @@ IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest, VerifyHideException) {
   EXPECT_EQ(observer_.hidden_notifications_.size(), 0u);
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest, VerifyRemove) {
+IN_PROC_BROWSER_TEST_P(AdblockContentFiltersBrowserTest, VerifyRemove) {
   SetFilters({"example.com##.id_to_remove_by_eh {remove: true;}",
               "example.com#?#span:-abp-contains(id_to_remove_by_ehe) {remove: "
               "true;}"});
@@ -179,7 +184,7 @@ IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest, VerifyRemove) {
           ":root > BODY:nth-child(2) > DIV:nth-child(5) > SPAN:nth-child(1)"));
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockContentFiltersBrowserTest,
                        VerifyRemoveException) {
   SetFilters({"example.com##.id_to_remove_by_eh {remove: true;}",
               "example.com#?#span:-abp-contains(id_to_remove_by_ehe\"]"
@@ -198,7 +203,7 @@ IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest,
   EXPECT_EQ(observer_.removed_notifications_.size(), 0u);
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest, VerifyInlineCss) {
+IN_PROC_BROWSER_TEST_P(AdblockContentFiltersBrowserTest, VerifyInlineCss) {
   SetFilters(
       {"example.com##.id_to_apply_style_by_eh {background-color: "
        "#00FF00!important;}",
@@ -221,7 +226,7 @@ IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest, VerifyInlineCss) {
           ":root > BODY:nth-child(2) > DIV:nth-child(7) > SPAN:nth-child(1)"));
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockContentFiltersBrowserTest,
                        VerifyInlineCssException) {
   SetFilters(
       {"example.com##.id_to_apply_style_by_eh {background-color: "
@@ -242,7 +247,7 @@ IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest,
   EXPECT_EQ(observer_.inline_css_notifications_.size(), 0u);
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest, VerifyAllFilters) {
+IN_PROC_BROWSER_TEST_P(AdblockContentFiltersBrowserTest, VerifyAllFilters) {
   SetFilters({"example.com##.id_to_elem_hide",
               "example.com#?#span:-abp-contains(id_to_elem_hide_emu)",
               "example.com##.id_to_remove_by_eh {remove: true;}",
@@ -281,7 +286,7 @@ IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest, VerifyAllFilters) {
           ":root > BODY:nth-child(2) > DIV:nth-child(7) > SPAN:nth-child(1)"));
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockContentFiltersBrowserTest,
                        VerifyHideToInlineCssSelectorChange) {
   SetFilters({"example.com#?#span:-abp-contains(hide_selector)",
               "example.com#?#span:-abp-contains(inline_css_selector) "
@@ -316,7 +321,7 @@ IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest,
           ":root > BODY:nth-child(2) > DIV:nth-child(11) > SPAN:nth-child(2)"));
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockContentFiltersBrowserTest,
                        VerifyHideToRemoveSelectorChange) {
   SetFilters(
       {"example.com#?#span:-abp-contains(hide_selector)",
@@ -350,7 +355,7 @@ IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest,
           ":root > BODY:nth-child(2) > DIV:nth-child(11) > SPAN:nth-child(4)"));
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockContentFiltersBrowserTest,
                        VerifyInlineCssStyleModificationLogic) {
   ASSERT_TRUE(
       content::NavigateToURL(shell(), GetUrl("/content_type_filters.html")));
@@ -382,4 +387,8 @@ IN_PROC_BROWSER_TEST_F(AdblockContentFiltersBrowserTest,
               testing::UnorderedElementsAre("#hidden_then_inline_css"));
 }
 
+INSTANTIATE_TEST_SUITE_P(All,
+                         AdblockContentFiltersBrowserTest,
+                         testing::Values(false /*normal*/, true /*incognito*/));
+
 }  // namespace adblock
diff --git a/components/adblock/content/browser/test/adblock_debug_url_browsertest.cc b/components/adblock/content/browser/test/adblock_debug_url_browsertest.cc
index 6cdf42b7e94c7..2a21c3aa6b9e1 100644
--- a/components/adblock/content/browser/test/adblock_debug_url_browsertest.cc
+++ b/components/adblock/content/browser/test/adblock_debug_url_browsertest.cc
@@ -36,13 +36,16 @@ using testing::StartsWith;
 
 namespace adblock {
 
-class AdblockDebugUrlTest : public AdblockBrowserTestBase {
+class AdblockDebugUrlTest : public AdblockBrowserTestBase,
+                            public testing::WithParamInterface<bool> {
  public:
   AdblockDebugUrlTest() {}
   ~AdblockDebugUrlTest() override = default;
   AdblockDebugUrlTest(const AdblockDebugUrlTest&) = delete;
   AdblockDebugUrlTest& operator=(const AdblockDebugUrlTest&) = delete;
 
+  bool IncognitoMode() override { return GetParam(); }
+
  protected:
   std::string ExecuteScriptAndExtractString(const std::string& js_code) {
     return content::EvalJs(web_contents(), js_code).ExtractString();
@@ -81,7 +84,7 @@ class AdblockDebugUrlTest : public AdblockBrowserTestBase {
       "document.getElementsByTagName('body')[0].firstChild.innerHTML";
 };
 
-IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestInvalidUrls) {
+IN_PROC_BROWSER_TEST_P(AdblockDebugUrlTest, TestInvalidUrls) {
   GURL no_command1(GetUrlForAdblockConfiguration());
   ASSERT_TRUE(content::NavigateToURL(shell(), no_command1));
   ASSERT_TRUE(base::StartsWith(
@@ -111,7 +114,7 @@ IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestInvalidUrls) {
       ExecuteScriptAndExtractString(kReadPageBodyScript), "INVALID_COMMAND"));
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestFilterCommands) {
+IN_PROC_BROWSER_TEST_P(AdblockDebugUrlTest, TestFilterCommands) {
   GURL clear_filters_url(GetUrlForAdblockConfiguration() + "/filters/clear");
   ASSERT_TRUE(content::NavigateToURL(shell(), clear_filters_url));
   ASSERT_EQ("OK", ExecuteScriptAndExtractString(kReadPageBodyScript));
@@ -151,7 +154,7 @@ IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestFilterCommands) {
             ExecuteScriptAndExtractString(kReadPageBodyScript));
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestDomainCommands) {
+IN_PROC_BROWSER_TEST_P(AdblockDebugUrlTest, TestDomainCommands) {
   GURL clear_domains_url(GetUrlForAdblockConfiguration() + "/domains/clear");
   ASSERT_TRUE(content::NavigateToURL(shell(), clear_domains_url));
   ASSERT_EQ("OK", ExecuteScriptAndExtractString(kReadPageBodyScript));
@@ -191,7 +194,7 @@ IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestDomainCommands) {
             ExecuteScriptAndExtractString(kReadPageBodyScript));
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestSubscriptionCommands) {
+IN_PROC_BROWSER_TEST_P(AdblockDebugUrlTest, TestSubscriptionCommands) {
   GURL clear_subscriptions_url(GetUrlForAdblockConfiguration() +
                                "/subscriptions/clear");
   ASSERT_TRUE(content::NavigateToURL(shell(), clear_subscriptions_url));
@@ -237,7 +240,7 @@ IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestSubscriptionCommands) {
             ExecuteScriptAndExtractString(kReadPageBodyScript));
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestEnableConfigurationCommands) {
+IN_PROC_BROWSER_TEST_P(AdblockDebugUrlTest, TestEnableConfigurationCommands) {
   GURL enable_adblock__url(GetUrlForAdblockConfiguration() +
                            "/configuration/enable");
   GURL disable_adblock_url(GetUrlForAdblockConfiguration() +
@@ -263,7 +266,7 @@ IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestEnableConfigurationCommands) {
             ExecuteScriptAndExtractString(kReadPageBodyScript));
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestEnableAACommands) {
+IN_PROC_BROWSER_TEST_P(AdblockDebugUrlTest, TestEnableAACommands) {
   GURL enable_aa_url(GetUrlForAdblockConfiguration() + "/aa/enable");
   GURL disable_aa_url(GetUrlForAdblockConfiguration() + "/aa/disable");
   GURL aa_state_url(GetUrlForAdblockConfiguration() + "/aa/state");
@@ -286,7 +289,7 @@ IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestEnableAACommands) {
             ExecuteScriptAndExtractString(kReadPageBodyScript));
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestHandleConfigurationsCommands) {
+IN_PROC_BROWSER_TEST_P(AdblockDebugUrlTest, TestHandleConfigurationsCommands) {
   GURL list_configurations_url(GetUrlForListingConfigurations() + "/list");
   GURL add_configuration_url(GetUrlForListingConfigurations() + "/add/adblock");
   GURL remove_configuration_url(GetUrlForListingConfigurations() +
@@ -314,7 +317,7 @@ IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestHandleConfigurationsCommands) {
   ASSERT_THAT(response, HasSubstr("adblock"));
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestUrlsInterception) {
+IN_PROC_BROWSER_TEST_P(AdblockDebugUrlTest, TestUrlsInterception) {
   std::vector<GURL> invalid_urls = {
       GURL{"https://adblocktest.data"}, GURL{"https://adblock.testdata"},
       GURL{"https://adblock.test.data.eyeo"}, GURL{"https://test.data.eyeo"}};
@@ -328,4 +331,8 @@ IN_PROC_BROWSER_TEST_F(AdblockDebugUrlTest, TestUrlsInterception) {
   }
 }
 
+INSTANTIATE_TEST_SUITE_P(All,
+                         AdblockDebugUrlTest,
+                         testing::Values(false /*normal*/, true /*incognito*/));
+
 }  // namespace adblock
diff --git a/components/adblock/content/browser/test/adblock_filtering_configurations_browsertest.cc b/components/adblock/content/browser/test/adblock_filtering_configurations_browsertest.cc
index 1ff1a842aaf5e..d034770333b19 100644
--- a/components/adblock/content/browser/test/adblock_filtering_configurations_browsertest.cc
+++ b/components/adblock/content/browser/test/adblock_filtering_configurations_browsertest.cc
@@ -41,7 +41,9 @@
 
 namespace adblock {
 
-class AdblockFilteringConfigurationBrowserTest : public AdblockBrowserTestBase {
+class AdblockFilteringConfigurationBrowserTest
+    : public AdblockBrowserTestBase,
+      public testing::WithParamInterface<bool> {
  public:
   AdblockFilteringConfigurationBrowserTest() {
     embedded_test_server()->ServeFilesFromSourceDirectory(
@@ -75,6 +77,8 @@ class AdblockFilteringConfigurationBrowserTest : public AdblockBrowserTestBase {
     host_resolver()->AddRule("*", "127.0.0.1");
   }
 
+  bool IncognitoMode() override { return GetParam(); }
+
   GURL BlockingFilterListUrl() {
     return embedded_test_server()->GetURL(
         "/filterlist_that_blocks_resource.txt");
@@ -146,7 +150,7 @@ class AdblockFilteringConfigurationBrowserTest : public AdblockBrowserTestBase {
   void ExpectResourceNotBlocked() { EXPECT_TRUE(IsResourceLoaded()); }
 };
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        NoBlockingByDefault) {
   auto configuration = MakeConfiguration("config");
   InstallFilteringConfiguration(std::move(configuration));
@@ -155,7 +159,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
   ExpectResourceNotBlocked();
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        ResourceBlockedByFilteringConfigurationsList) {
   auto configuration = MakeConfiguration("config");
   configuration->AddFilterList(BlockingFilterListUrl());
@@ -168,7 +172,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
   ExpectResourceBlocked();
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        ResourceHiddenByFilteringConfigurationsList) {
   auto configuration = MakeConfiguration("config");
   configuration->AddFilterList(ElementHidingFilterListUrl());
@@ -181,7 +185,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
   ExpectResourceHidden();
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        ResourceAllowedByFilteringConfigurationsList) {
   auto configuration = MakeConfiguration("config");
   configuration->AddFilterList(BlockingFilterListUrl());
@@ -199,7 +203,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
   ExpectResourceNotHidden();
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        BlockingTakesPrecedenceBetweenConfigurations) {
   auto blocking_configuration = MakeConfiguration("blocking");
   blocking_configuration->AddFilterList(BlockingFilterListUrl());
@@ -217,7 +221,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
   ExpectResourceBlocked();
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        ElementBlockedByCustomFilter) {
   auto configuration = MakeConfiguration("config");
   configuration->AddCustomFilter("*resource.png");
@@ -228,7 +232,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
   ExpectResourceBlocked();
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        ElementAllowedByCustomFilter) {
   auto configuration = MakeConfiguration("config");
   configuration->AddCustomFilter("*resource.png");
@@ -240,7 +244,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
   ExpectResourceNotBlocked();
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        ElementAllowedByAllowedDomain) {
   auto configuration = MakeConfiguration("config");
   configuration->AddCustomFilter("*resource.png");
@@ -252,7 +256,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
   ExpectResourceNotBlocked();
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        PRE_CustomFiltersPersist) {
   auto configuration = MakeConfiguration("persistent");
   // This custom filter will survive browser restart.
@@ -260,7 +264,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
   InstallFilteringConfiguration(std::move(configuration));
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        CustomFiltersPersist) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -275,7 +279,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
   ExpectResourceBlocked();
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        DisabledConfigurationDoesNotBlock) {
   auto configuration = MakeConfiguration("config");
   configuration->AddCustomFilter("*resource.png");
@@ -287,7 +291,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
   ExpectResourceNotBlocked();
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        ConfigurationCanBeUsedAfterInstalling) {
   auto configuration = MakeConfiguration("config");
   auto* configuration_ptr = configuration.get();
@@ -300,7 +304,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
   ExpectResourceBlocked();
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        ConfigurationCanBeDisabledAfterInstalling) {
   auto configuration = MakeConfiguration("config");
   auto* configuration_ptr = configuration.get();
@@ -314,7 +318,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
   ExpectResourceNotBlocked();
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        SubscriptionsDownloadedAfterConfigurationEnabled) {
   auto configuration = MakeConfiguration("config");
   configuration->SetEnabled(false);
@@ -332,7 +336,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
                                    ElementHidingFilterListUrl()});
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        PRE_DownloadedSubscriptionsPersistOnDisk) {
   auto configuration = MakeConfiguration("config");
   // This filter list setting will survive browser restart.
@@ -344,21 +348,21 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
   WaitUntilSubscriptionsInstalled({BlockingFilterListUrl()});
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        DownloadedSubscriptionsPersistOnDisk) {
   NavigateToPage();
   ExpectResourceBlocked();
 }
 
 // 1st run: create.
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        PRE_PRE_CreateThenRemoveCustomConfiguration) {
   auto configuration = MakeConfiguration("persistent");
   InstallFilteringConfiguration(std::move(configuration));
 }
 
 // 2nd run: remove.
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        PRE_CreateThenRemoveCustomConfiguration) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -376,7 +380,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
 }
 
 // 3rd run: verify not present.
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        CreateThenRemoveCustomConfiguration) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -388,7 +392,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
 
 // 1st run: confirm "adblock" configuration is created and contains expected
 // default settings, then change some settings and verify in the next run.
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        PRE_PRE_RemoveAdblockConfiguration) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -415,7 +419,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
 
 // 2nd run: make sure that previously changed settings are persisted, then
 // remove "adblock" configuration.
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        PRE_RemoveAdblockConfiguration) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -442,7 +446,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
 }
 
 // 3rd run: verify "adblock" configuration is not present.
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        RemoveAdblockConfiguration) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -454,7 +458,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
 }
 
 // 1st run: set legacy prefs and verify migration in the next run.
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        PRE_MigrateSettings) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -508,7 +512,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
 }
 
 // 2nd run: check migrated settings.
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        MigrateSettings) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -536,7 +540,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
               filters.end());
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        PRE_PersistDisabledAAState) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -554,7 +558,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
                          AcceptableAdsUrl()) != subscriptions.end());
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        PersistDisabledAAState) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -568,7 +572,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
                          AcceptableAdsUrl()) != subscriptions.end());
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        PRE_PersistEnabledAAState) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -590,7 +594,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
                         AcceptableAdsUrl()) != subscriptions.end());
 }
 
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationBrowserTest,
                        PersistEnabledAAState) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -604,6 +608,10 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationBrowserTest,
                         AcceptableAdsUrl()) != subscriptions.end());
 }
 
+INSTANTIATE_TEST_SUITE_P(All,
+                         AdblockFilteringConfigurationBrowserTest,
+                         testing::Values(false /*normal*/, true /*incognito*/));
+
 class AdblockFilteringConfigurationDisableSwitchBrowserTest
     : public AdblockFilteringConfigurationBrowserTest {
  public:
@@ -617,7 +625,7 @@ class AdblockFilteringConfigurationDisableSwitchBrowserTest
 };
 
 // 1st run: create configuration and make sure it is enabled by default.
-IN_PROC_BROWSER_TEST_F(
+IN_PROC_BROWSER_TEST_P(
     AdblockFilteringConfigurationDisableSwitchBrowserTest,
     PRE_PRE_PRE_CreateConfigAndConfirmEnableStateAfterReset) {
   auto configuration = MakeConfiguration("persistent");
@@ -626,7 +634,7 @@ IN_PROC_BROWSER_TEST_F(
 }
 
 // 2nd run: make sure configuration is enabled after restart.
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationDisableSwitchBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationDisableSwitchBrowserTest,
                        PRE_PRE_CreateConfigAndConfirmEnableStateAfterReset) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -639,7 +647,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationDisableSwitchBrowserTest,
 
 // 3rd run: after adding "--disable-eyeo-filtering" make sure configuration is
 // disabled.
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationDisableSwitchBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationDisableSwitchBrowserTest,
                        PRE_CreateConfigAndConfirmEnableStateAfterReset) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -652,7 +660,7 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationDisableSwitchBrowserTest,
 
 // 4th run: without "--disable-eyeo-filtering" make sure configuration is still
 // disabled.
-IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationDisableSwitchBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockFilteringConfigurationDisableSwitchBrowserTest,
                        CreateConfigAndConfirmEnableStateAfterReset) {
   auto configurations =
       SubscriptionServiceFactory::GetForBrowserContext(browser_context())
@@ -663,4 +671,8 @@ IN_PROC_BROWSER_TEST_F(AdblockFilteringConfigurationDisableSwitchBrowserTest,
   ASSERT_FALSE((*configuration)->IsEnabled());
 }
 
+INSTANTIATE_TEST_SUITE_P(All,
+                         AdblockFilteringConfigurationDisableSwitchBrowserTest,
+                         testing::Values(false /*normal*/, true /*incognito*/));
+
 }  // namespace adblock
diff --git a/components/adblock/content/browser/test/adblock_web_ui_browsertest.cc b/components/adblock/content/browser/test/adblock_web_ui_browsertest.cc
index 2eeca70ebc41e..605cce308dcfb 100644
--- a/components/adblock/content/browser/test/adblock_web_ui_browsertest.cc
+++ b/components/adblock/content/browser/test/adblock_web_ui_browsertest.cc
@@ -16,28 +16,22 @@
  */
 
 #include "base/strings/strcat.h"
+#include "components/adblock/content/browser/test/adblock_browsertest_base.h"
 #include "components/adblock/core/common/web_ui_constants.h"
-#include "content/public/browser/web_contents.h"
 #include "content/public/test/browser_test.h"
-#include "content/public/test/content_browser_test.h"
 #include "content/public/test/content_browser_test_utils.h"
-#include "content/shell/app/shell_main_delegate.h"
 #include "content/shell/browser/shell.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
 namespace adblock {
 
-class AdblockWebUIBrowserTest : public content::ContentBrowserTest {
+class AdblockWebUIBrowserTest : public AdblockBrowserTestBase,
+                                public testing::WithParamInterface<bool> {
  public:
-  // Without this override there is no AdblockShellContentBrowserClient
-  // (created by ShellMainDelegate) but default ShellContentBrowserClient.
-  content::ContentMainDelegate* GetOptionalContentMainDelegateOverride()
-      override {
-    return new content::ShellMainDelegate(true);
-  }
+  bool IncognitoMode() override { return GetParam(); }
 };
 
-IN_PROC_BROWSER_TEST_F(AdblockWebUIBrowserTest,
+IN_PROC_BROWSER_TEST_P(AdblockWebUIBrowserTest,
                        AdblockInternalsPageLoadsSuccessfully) {
   ASSERT_TRUE(content::NavigateToURL(
       shell(),
@@ -46,7 +40,7 @@ IN_PROC_BROWSER_TEST_F(AdblockWebUIBrowserTest,
   EXPECT_EQ(u"Ad-Filtering Internals", shell()->web_contents()->GetTitle());
 }
 
-IN_PROC_BROWSER_TEST_F(
+IN_PROC_BROWSER_TEST_P(
     AdblockWebUIBrowserTest,
     VisitingAdblockInternalsWithInvalidSchemeResultsInErrorPage) {
   EXPECT_FALSE(content::NavigateToURL(
@@ -55,4 +49,8 @@ IN_PROC_BROWSER_TEST_F(
   EXPECT_EQ(u"Error", shell()->web_contents()->GetTitle());
 }
 
+INSTANTIATE_TEST_SUITE_P(All,
+                         AdblockWebUIBrowserTest,
+                         testing::Values(false /*normal*/, true /*incognito*/));
+
 }  // namespace adblock
diff --git a/content/shell/browser/adblock/adblock_shell_browser_context.cc b/content/shell/browser/adblock/adblock_shell_browser_context.cc
index ccad4dc4c5754..bda5796f72654 100644
--- a/content/shell/browser/adblock/adblock_shell_browser_context.cc
+++ b/content/shell/browser/adblock/adblock_shell_browser_context.cc
@@ -29,18 +29,13 @@
 
 namespace content {
 
-AdblockShellBrowserContext::AdblockShellBrowserContext()
-    : ShellBrowserContext(false) {
+AdblockShellBrowserContext::AdblockShellBrowserContext(bool off_the_record)
+    : ShellBrowserContext(off_the_record) {
   CreateUserPrefService();
 }
 
 AdblockShellBrowserContext::~AdblockShellBrowserContext() {}
 
-bool AdblockShellBrowserContext::IsOffTheRecord() {
-  // Adblock services should not be created for off-the-record contexts
-  return false;
-}
-
 void AdblockShellBrowserContext::CreateUserPrefService() {
   auto pref_registry = base::MakeRefCounted<user_prefs::PrefRegistrySyncable>();
 
diff --git a/content/shell/browser/adblock/adblock_shell_browser_context.h b/content/shell/browser/adblock/adblock_shell_browser_context.h
index b335c51a22aa8..ee8996b4e19a9 100644
--- a/content/shell/browser/adblock/adblock_shell_browser_context.h
+++ b/content/shell/browser/adblock/adblock_shell_browser_context.h
@@ -24,11 +24,9 @@ namespace content {
 
 class AdblockShellBrowserContext : public ShellBrowserContext {
  public:
-  AdblockShellBrowserContext();
+  explicit AdblockShellBrowserContext(bool off_the_record);
   ~AdblockShellBrowserContext() override;
 
-  bool IsOffTheRecord() override;
-
  private:
   void CreateUserPrefService();
 };
diff --git a/content/shell/browser/adblock/adblock_shell_content_browser_client.cc b/content/shell/browser/adblock/adblock_shell_content_browser_client.cc
index b86536a728acf..3684f251a9b2a 100644
--- a/content/shell/browser/adblock/adblock_shell_content_browser_client.cc
+++ b/content/shell/browser/adblock/adblock_shell_content_browser_client.cc
@@ -23,8 +23,10 @@ namespace content {
 
 content::BrowserContext*
 AdblockShellContentBrowserClient::GetBrowserContextForEyeoFactories(
-    content::BrowserContext* /*current_browser_context*/) {
-  return browser_context();
+    content::BrowserContext* current_browser_context) {
+  return current_browser_context->IsOffTheRecord()
+             ? off_the_record_browser_context()
+             : browser_context();
 }
 
 }  // namespace content
diff --git a/content/shell/browser/shell.cc b/content/shell/browser/shell.cc
index d6f6b7e92970e..ccce77d85d6dc 100644
--- a/content/shell/browser/shell.cc
+++ b/content/shell/browser/shell.cc
@@ -96,12 +96,6 @@ Shell::Shell(std::unique_ptr<WebContents> web_contents,
 
   windows_.push_back(this);
 
-  content::BrowserContext* browser_context =
-      ShellContentBrowserClient::Get()->browser_context();
-  adblock::EnsureBackgroundServicesStarted(browser_context);
-  adblock::RegisterAdblockWebContentObserver<
-      adblock::AdblockWebContentObserver>(web_contents_.get(), browser_context);
-
   if (shell_created_callback_)
     std::move(shell_created_callback_).Run(this);
 }
@@ -242,6 +236,11 @@ Shell* Shell::CreateNewWindow(BrowserContext* browser_context,
   }
   std::unique_ptr<WebContents> web_contents =
       WebContents::Create(create_params);
+
+  adblock::EnsureBackgroundServicesStarted(browser_context);
+  adblock::RegisterAdblockWebContentObserver<
+      adblock::AdblockWebContentObserver>(web_contents.get(), browser_context);
+
   Shell* shell =
       CreateShell(std::move(web_contents), AdjustWindowSize(initial_size),
                   true /* should_set_delegate */);
diff --git a/content/shell/browser/shell_browser_main_parts.cc b/content/shell/browser/shell_browser_main_parts.cc
index 60317bc1ffa09..433f3174b1cd4 100644
--- a/content/shell/browser/shell_browser_main_parts.cc
+++ b/content/shell/browser/shell_browser_main_parts.cc
@@ -144,8 +144,8 @@ int ShellBrowserMainParts::PreEarlyInitialization() {
 }
 
 void ShellBrowserMainParts::InitializeBrowserContexts() {
-  set_browser_context(new AdblockShellBrowserContext());
-  set_off_the_record_browser_context(new ShellBrowserContext(true));
+  set_browser_context(new AdblockShellBrowserContext(false));
+  set_off_the_record_browser_context(new AdblockShellBrowserContext(true));
   // Persistent Origin Trials needs to be instantiated as soon as possible
   // during browser startup, to ensure data is available prior to the first
   // request.
-- 
2.43.0

