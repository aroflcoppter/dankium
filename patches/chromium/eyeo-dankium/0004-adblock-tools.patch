From f15811efde9f69c836aa8a9fe44f783ab34ba593 Mon Sep 17 00:00:00 2001
From: vanilla-chromium-builder <project_26591639_bot@noreply.gitlab.com>
Date: Thu, 22 May 2025 15:50:31 +0000
Subject: [PATCH] adblock tools

Copyright (C) 2006-present eyeo GmbH.

---
 tools/eyeo/generate_interdiffs.sh             |  150 +++
 tools/eyeo/git-grafts.txt                     |   62 +
 tools/eyeo/update_git_grafts.py               |  138 ++
 tools/gritsettings/resource_ids.spec          |   12 +
 .../histograms/metadata/extensions/enums.xml  |    5 +-
 tools/perf/benchmarks/eyeo.py                 |  839 +++++++++++++
 tools/perf/page_sets/eyeo_page_set.py         | 1110 +++++++++++++++++
 .../definitions/adblock_private.d.ts          |  182 +++
 .../definitions/eyeo_filtering_private.d.ts   |  266 ++++
 9 files changed, 2763 insertions(+), 1 deletion(-)
 create mode 100755 tools/eyeo/generate_interdiffs.sh
 create mode 100644 tools/eyeo/git-grafts.txt
 create mode 100755 tools/eyeo/update_git_grafts.py
 create mode 100644 tools/perf/benchmarks/eyeo.py
 create mode 100644 tools/perf/page_sets/eyeo_page_set.py
 create mode 100644 tools/typescript/definitions/adblock_private.d.ts
 create mode 100644 tools/typescript/definitions/eyeo_filtering_private.d.ts

diff --git a/tools/eyeo/generate_interdiffs.sh b/tools/eyeo/generate_interdiffs.sh
new file mode 100755
index 0000000000000..9d6da1dae63e5
--- /dev/null
+++ b/tools/eyeo/generate_interdiffs.sh
@@ -0,0 +1,150 @@
+#!/bin/bash
+
+# This file is part of eyeo Chromium SDK,
+# Copyright (C) 2006-present eyeo GmbH
+# eyeo Chromium SDK is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 3 as
+# published by the Free Software Foundation.
+# eyeo Chromium SDK is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# You should have received a copy of the GNU General Public License
+# along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+
+if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
+	echo "
+  This script generates interdiffs between eyeo Chromium SDK releases, git diff
+  file will be saved in `eyeo_modules/` directory, created if needed.
+  No upstream changes included in diff file.
+  Module interdiffs supported since version 115.
+
+  Usage:
+    generate_interdiffs.sh <eyeo-release-tag> <eyeo-release-tag> <options>
+
+  Options:
+    --full-sdk          Generates one diff includes whole eyeo Chromium SDK implementation (include testing & CI files)
+    --all-modules       Generates diff files for each module: base, chrome, webview, android-api, android-settings and extension-api
+    --base              Generates one diff for base module changes
+    --chrome            Generates one diff for Chorme Integration module changes
+    --webview           Generates one diff for Android Webview Integration module changes
+    --android-api       Generates one diff for Android API module changes
+    --android-settings  Generates one diff for Android UI module changes
+    --extension-api     Generates one diff for Extension API module changes
+"
+  exit
+fi
+
+OLD_TAG=$1
+NEW_TAG=$2
+OPTIONS=${@:3}
+OPTIONS="${OPTIONS/--all-modules/ -- base --chrome --webview --android-api --android-settings --extension-api}"
+
+if [ -z "$OLD_TAG" ] || [ -z "$NEW_TAG" ]; then
+	echo "
+  Missing arguments!
+  Usage:
+    generate_interdiffs.sh <eyeo-release-tag> <eyeo-release-tag> <options>
+  or see help:
+    generate_interdiffs.sh --help
+"
+	exit
+fi
+
+# git has no diff support for binary files
+# also remove any internal CI files
+EXCLUDE_FILES=("components/resources/adblocking/easylist*"
+               "components/resources/adblocking/exceptionrules*"
+               "components/resources/adblocking/anticv*"
+               ".ci-scripts/*"
+               ".gitlab-ci.yml"
+)
+
+for module in $OPTIONS
+do
+  if [ "$module" = "--base" ]; then
+    SUFFIX="-base-module-branch"
+  elif [ "$module" = "--chrome" ]; then
+    SUFFIX="-base-chrome-module-branch"
+  elif [ "$module" = "--android-api" ]; then
+    SUFFIX="-base-chrome-android-api-module-branch"
+  elif [ "$module" = "--android-settings" ]; then
+    SUFFIX="-base-chrome-android-settings-module-branch"
+  elif [ "$module" = "--extension-api" ]; then
+    SUFFIX="-base-chrome-desktop-module-branch"
+  elif [ "$module" = "--webview" ]; then
+    SUFFIX="-base-webview-module-branch"
+  elif [ "$module" = "--full-sdk" ]; then
+    SUFFIX=""
+  else
+    echo "
+  Unknow option: $module
+  Avaiable options:
+    --full-sdk
+    --all-modules
+    --base
+    --chrome
+    --webview
+    --android-api
+    --android-settings
+    --extension-api
+"
+    exit
+  fi
+
+  repo_dir=$(git rev-parse --show-toplevel)
+  mkdir -p $repo_dir/eyeo_modules/interdiffs
+
+  OLD_TAG_HEAD=$(git rev-parse --verify origin/${OLD_TAG}${SUFFIX}  2>/dev/null)
+  OLD_TAG_PREV=$(git rev-parse --verify origin/${OLD_TAG}${SUFFIX}~1  2>/dev/null)
+  NEW_TAG_HEAD=$(git rev-parse --verify origin/${NEW_TAG}${SUFFIX}  2>/dev/null)
+  NEW_TAG_PREV=$(git rev-parse --verify origin/${NEW_TAG}${SUFFIX}~1  2>/dev/null)
+
+  if [ "$module" = "--full-sdk" ]; then
+    OLD_TAG_HEAD=$(git ls-remote --tags origin | grep -o -e ${OLD_TAG}$)
+    NEW_TAG_HEAD=$(git ls-remote --tags origin | grep -o -e ${NEW_TAG}$)
+  else
+    OLD_TAG_HEAD=$(git rev-parse --verify origin/${OLD_TAG}${SUFFIX}  2>/dev/null)
+    NEW_TAG_HEAD=$(git rev-parse --verify origin/${NEW_TAG}${SUFFIX}  2>/dev/null)
+  fi
+
+  if [ -z "$OLD_TAG_HEAD" ]; then
+    echo "Interdiff modules are not supported for version ${OLD_TAG}"
+  fi
+  if [ -z "$NEW_TAG_HEAD" ]; then
+   echo "Interdiff modules are not supported for version ${NEW_TAG}"
+  fi
+  if [ -z "$OLD_TAG_HEAD" ] || [ -z "$NEW_TAG_HEAD" ]; then
+	  echo "Interdiff are supported since version 115"
+	  exit
+  fi
+
+  if [ "$module" = "--full-sdk" ]; then
+    # Find lastest upstream commit for given version.
+    OLD_VERSION=$(echo ${OLD_TAG} | cut -d "-" -f3)
+    NEW_VERSION=$(echo ${NEW_TAG} | cut -d "-" -f3)
+    OLD_TAG_PREV=$(git log --no-decorate --all --grep="Publish DEPS for ${OLD_VERSION}" -n 1 --pretty=format:"%h")
+    NEW_TAG_PREV=$(git log --no-decorate --all --grep="Publish DEPS for ${NEW_VERSION}" -n 1 --pretty=format:"%h")
+  else
+    # Take advantage of modules test branches design,
+    # top commit always contain module changes only.
+    OLD_TAG_PREV=$(git rev-parse --verify origin/${OLD_TAG}${SUFFIX}~1  2>/dev/null)
+    NEW_TAG_PREV=$(git rev-parse --verify origin/${NEW_TAG}${SUFFIX}~1  2>/dev/null)
+  fi
+
+  # Create a list of changed files, it's important to create it for each version,
+  # some of files may renamed.
+  OLD_TAG_FILES=$(git diff --name-only $OLD_TAG_HEAD..$OLD_TAG_PREV)
+  NEW_TAG_FILES=$(git diff --name-only $NEW_TAG_HEAD..$NEW_TAG_PREV)
+  # Combine and uniquify.
+  COMBINED_FILES=(`for R in "${OLD_TAG_FILES[@]}" "${NEW_TAG_FILES[@]}" ; do echo "$R" ; done | sort -du`)
+  # Remove files not supported by git diff
+  for del in ${EXCLUDE_FILES[@]}
+  do
+    COMBINED_FILES=("${COMBINED_FILES[@]/$del}")
+  done
+
+  #Create diff in eyeo_modules/interdiffs/
+  git diff ${OLD_TAG_HEAD}..${NEW_TAG_HEAD} -- ${COMBINED_FILES[@]} > $repo_dir/eyeo_modules/interdiffs/${module:2}-$OLD_TAG-$NEW_TAG.diff
+
+done
diff --git a/tools/eyeo/git-grafts.txt b/tools/eyeo/git-grafts.txt
new file mode 100644
index 0000000000000..876e2a4748a74
--- /dev/null
+++ b/tools/eyeo/git-grafts.txt
@@ -0,0 +1,62 @@
+1993fb58c5732068109ce4178ee09bced4973a8a 83a714deb7aeff970e55ef11174b03aa02970d29
+3cc64cebef5c028d87495de797630d2e3d56d522 a71c84f53e4e2254f6a34ed50e37ecf5d4362eb9
+85b8322d2c1c97e7adfbe2162e7ade16fcd1e019 f2299e697fb99f2a693b405a2043d9622ebfe68b
+075b1b8375709eae8a56081a9d4230ab56484ba4 65212eee6e9e6043ad78fc59619cbba31a692f67
+e5425abe809325552de52772f2c5f379060f41d8 b78c67a90f7e0ed9ee2529da85520ba9d24185c1
+55fb8d16b251b7751aaef1dde724fa1acd3b2512 3d7d288226b954eedd7d4db928133a03bb32d9a4
+a0bdd758f02b0a973a07c5486fef1e5148e985b5 3a18a0a561aa5f19743059f527fde8ac20a329f9
+72c35aa81c0eb92c413ab2f1481e3c81d28fa4b3 e88b1fb508d57308143a0005d7a4368a2e8656d9
+28a859d07ad66e265ece583500d5c2aa513df498 6d0c75854dfddbaf96e45a3e20dca31daf212646
+00a4506ad055e5c7fe50bf7285e7c21ae33a7617 42531c8a229cfdc9d81055d95a93d49281b0cdc7
+71fe1219179ec91612747e760f9ceaf1c55f959c 7183b2bcd824389352a6d4fb114305643b06010a
+0cf8f8cf740f66e797d1a14b98a5af0f2fd7bccc 7f4ecd6ff3c5d59a8ea26c511aed7ea50b34d5f0
+f7ab1d7d5a773d4b05f8219bd8cd8a4e0835955d 030679db5aa258eaeda51e9af0f7f359cd7e5dae
+f9703ad6719b7496dfe936256bd8757935d0cd35 e0c7003923d0111e67783c0feb536bbb937f8f99
+af67c186260b532105c3a9041db0accf0d1d805b 67abc991ac9e6f84c8e9e2cae842c9135757f97a
+b90d21e346c1dab43536225e769ae9a1aed215bf b5f1cd66ae833254af0060d19c2fbb87f2e4e0a2
+3d9140d9dcf8211bf0be5a8dfc3553f06b2ab617 98aff70170930709f1f078746ea2cc218ba2e943
+89e91afc21625e16817fc25dc366bb85d88c33b1 77d2b3fe29f7064fc1cb73208d284c166230736a
+aa494b089524bdfe720bf03f13b7b1e16ab4d89f 4e874c2ea438d5ffe18dec6309209c98d95384a1
+5419042be2706f051ccc08beb294139254bb3dca 10709033d2d2369bd5beee542f894b922afb84ae
+ff255f92522eba0e8df710cb46fcc26e976d44bf 28b4a950a4697779be3e5d2131e72b37164614e7
+b49dfa7f78db0ed4c0dc0624cb7c235e3ab9b279 4d06002be9175c8d69d802a5a8f11092483ab551
+a95021cf432bca5af8cd090f4c1186e21d3414d2 677d965137e0db697e472afabaf8bbcf0d7a9eff
+8ff58a6c01f55cf01982e3b2c6f4a59d06c81d2a bc37057a9c32c6a222c9353005381479aae49b0b
+eed2bc6a3b93da352bc997f0b23bac1b046cc417 1d37d23ed509892c48ef254142417106522a7395
+e2295866881ff6cb879f088cabff07ac27c0b329 75d3007c01b399ad8ae8d81ae06d7e1131d1eea9
+b987521700eee8bc1634a223163870fc636820c4 6c207ed37603d2948f89ecd543809f270f636bfb
+cd323706ed19015f9a0e9c26d871a6bb2904d7b5 2c33603b503621b2288f249502fef3ce1a242515
+129916b33c954bbf320479fb2e6431b86011cbe2 8cbdaaa2b9c76bc1b34ae19b14077b000537c87a
+fb45dea33a8e7becbfc323d166d6ee88af0a4c66 7bc3071f272e65ee1512d3e7d0d00aead9708cfe
+2c93685d830d68e7f9655aefa51353945269c7d1 826ec2a713ba188cc848af0fed9f1fc1a125fbc0
+358aab35b34c525ab06376020a57d22ea33f6e1a 719a6d0c812ce27e4b6a9e88f9906f59cd58b254
+253b575b97b8a629e7fe30a307a75e95d47e9998 70ce4c09c449d3550de862c8c7f747e323dd4ed6
+09286cb9d84611f1423860634a625b8ef5ff3db7 a6a3c99d16f77163499df8f6aa7238e9eec21faf
+f79b75f25bf35cc956418c66f89142420869c433 344d2e5bc555bc68e41c49a276373e2144b6fb3e
+254d4a1bde02c19ba5129f2f43d3a55989c35a05 8e8d9a10a7887cdd4bff19b5b9e8a094322589b8
+51526d2be3cdc5d0c811c269bdd3abac315ebd52 a2eb6c9e1e2bf76d4f1c6da03890d15594d17bdc
+de5ef6a219591f47366ef26eccdeba26cbf4dc03 1bf0ca616a289d6c94eff118cfc303edf4abaffb
+497b28215f9c251b76a82fc231f89e843e6a37ea 2a9c2131c3a1f04d25b534b65dfa025bf93cbf8e
+04b531ba2088e564f777cab502b63b4e7a2cd3e6 9eab1f740b3a8833128d44a7d887766db83693d0
+4c12a11b0f39cd519dbdada53f4dc1549ac67350 1b30d2ef588966afa0fd0bbbf3bc59cc2f80bc11
+1b30d2ef588966afa0fd0bbbf3bc59cc2f80bc11 f5e286d6301ba7554221a75d81b6e7a858f8f073
+41b98cfba00ea986cf9b994dbc040e4ab6182d60 22f11466dced853e7c50a9bbc677ae8052e0f868
+a12933701caa063d2dfe1faef35ab589015e28c9 244e183b19af69ddb18fdb07f953ab3656c84fbe
+1d06e1212f035eed9a82693f8921c22a1fd83ef5 2643a14e760871a401a305d5bfb93a39ed9eebdb
+add946a1ca9ea6914a24e530e849ef300757273e 5f995cfe54f95147b0eaf088b4ab3b300935c8bd
+45c55a85627eefff791d308ec1b319bc756b4b74 37d0711460d777de52dfc2db275993f7a5c4bf59
+8a92cbbf79aeba36022f9add08e32c460445ccb5 bf0c79ebb568cafd788ae7486831ee1f366285a3
+6ffab382a3c3bb2ed452a4d1862d6d7f3e4b089d 61ab65ca5bd94a1c534432450c9e50784b6417c2
+24fd81f78a3ec081cd08520661f55d027a9eeb70 3dcf70cf1550c3e2518f9020fac2f0f4c0a96bf9
+2289b928d38fb24e39955a33b150544d6912ac97 24d69623e939b8087fc8a1d858fb14be1073c6bd
+7f4595e16643888ccf41d450af3cd4b68f22281a 26aa7e401fd389c57634b693748ec920f786c02d
+3c24736e7f01b355a33d91ae8a975c59d14ded31 4e16d7fb75cb732d08d7eec20befced3642fe05d
+a6d29918b59556064dd2bfbac9e5382c3a50850e 6a42736c06aacb5b2224bb534dedaa3ef8eb06f6
+099a7ccbb729d17a381caa59d43577f40b343f1b 5b05662ae7583fd9dea7214a7189e9bf90f38614
+5de71172b93ce67883027b126122a2114ea40e49 0d87ad8ca1e8bce50f5b14c0573ab402480baa64
+780be6bfcfd737aa58aed6d39945b636126c100a 446b5a7cf1d1d6d1ac1b86df6b7157e2c8c3ed29
+3ce435b739edbf0ceca221f5eb1baa0fd277ad57 6b9a72a6c1ecc15bdddc55f4a7c8edc0888c464f
+07b86d6e93f14a6245285570eb869084891b6a33 2edc3ab35ab850f868be548584a97d62cfc160c3
+ec381022fd3de8fd6c64974cb26910eca378329f 94a3dddac5f42c677ac839d80fab44c3f07cb149
+8292544db4ab7434892de56d97904567ff96434e cc708e975e0665a2d602e920d985e3cfacf7cf85
+deb6243cff93f62d3f4a3c896c206c3e8436508e 75a0e5c3285bf28e038fde2cd87aab288b5cc577
diff --git a/tools/eyeo/update_git_grafts.py b/tools/eyeo/update_git_grafts.py
new file mode 100755
index 0000000000000..904123d5ae2a1
--- /dev/null
+++ b/tools/eyeo/update_git_grafts.py
@@ -0,0 +1,138 @@
+#!/bin/python3
+
+# This file is part of eyeo Chromium SDK,
+# Copyright (C) 2006-present eyeo GmbH
+#
+# eyeo Chromium SDK is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 3 as
+# published by the Free Software Foundation.
+#
+# eyeo Chromium SDK is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+
+# This script generates a graft file from git history. A graft file is a list
+# of commits that connect disjoint branches in the git history.
+#
+# Example graft file contents:
+# 1993fb58c5732068109ce4178ee09bced4973a8a 83a714deb7aeff970e55ef11174b03aa02970d29
+# 3cc64cebef5c028d87495de797630d2e3d56d522 a71c84f53e4e2254f6a34ed50e37ecf5d4362eb9
+# 85b8322d2c1c97e7adfbe2162e7ade16fcd1e019 f2299e697fb99f2a693b405a2043d9622ebfe68b
+# ...
+#
+# When git blame traverses history and reaches a commit 1993fb58c5732068109ce4178ee09bced4973a8a
+# it will skip over it and go to 83a714deb7aeff970e55ef11174b03aa02970d29, then resume
+# traversing history from there. If it then reaches 3cc64cebef5c028d87495de797630d2e3d56d522
+# it will skip over to a71c84f53e4e2254f6a34ed50e37ecf5d4362eb9 and so on.
+#
+# In eyeo, we squash our changes when we update to a new Chromium version. This
+# means that we lose the history of our changes after every upgrade. Thankfully,
+# every squashed commit has a "eyeo-parent-commit" line in its commit message
+# which leads us to its pre-squash history. This script traverses
+# the git history and generates a graft file that contains pairs of:
+# hash-of-squash-commit hash-of-its-eyeo-parent-commit
+
+import argparse
+import re
+import subprocess
+
+
+def get_commit_message(commit_hash):
+  try:
+    # Try to get the commit message
+    return subprocess.check_output(
+        ['git', 'show', '-s', '--format=%B', commit_hash]).decode('utf-8')
+  except subprocess.CalledProcessError:
+    # This can happen if the commit is a bad object.
+    # For example, if the branch was deleted after a merge request was merged.
+    return None
+
+
+def get_parent_commits(commit_hash):
+  # Get the parent commits of the current commit
+  return subprocess.check_output(
+      ['git', 'rev-list', '-1', '--parents',
+       commit_hash]).decode('utf-8').strip().split()[1:]
+
+
+def read_existing_grafts(graft_file):
+  # Read the existing grafts from the graft file
+  with open(graft_file, 'r') as f:
+    return [tuple(line.strip().split()) for line in f]
+
+
+def get_grafts_from_history(start_commit, max_commits, existing_grafts):
+  # Recurse into git history to find grafts.
+  grafts = []
+  # Since branches can have multiple parents, we need to recurse through
+  # all possible paths to find the next "eyeo-parent-commit" line (ie. "mainline").
+  # Instead of using recursion, we use a stack onto which we push the next
+  # commit to visit and its depth in the tree.
+  stack = [(start_commit, 0)]
+  while stack:
+    commit_hash, depth = stack.pop()
+    if depth >= max_commits:
+      continue
+    commit_message = get_commit_message(commit_hash)
+    if commit_message is None:
+      continue  # Skip this branch, it has a bad object (deleted MR branch?)
+    match = re.search(r'eyeo-parent-commit:([a-f0-9]{40})', commit_message)
+    if match:
+      # We found a graft! Add it to the list.
+      parent_commit = match.group(1)
+      graft = (commit_hash, parent_commit)
+      if graft in existing_grafts:
+        # Since this graft is already in existing_grafts, the rest of history
+        # is already grafted. We can stop traversing. This will happen if
+        # a partially populated graft file already exists and we're only
+        # updating it with the latest grafts.
+        break
+      grafts.append(graft)
+      # Since we found a graft, we know we're on "mainline" and we can
+      # prune unvisited branches. They will not contain any grafts.
+      stack = [(parent_commit, depth + 1)]
+    else:
+      # We didn't find a graft. Keep traversing history, checking all parents.
+      parent_commits = get_parent_commits(commit_hash)
+      for parent_commit in parent_commits:
+        stack.append((parent_commit, depth + 1))
+  return grafts
+
+
+def append_graft_file(grafts, graft_file):
+  # Append the new grafts to the graft file
+  with open(graft_file, 'a') as f:
+    for graft in grafts:
+      f.write(f"{graft[0]} {graft[1]}\n")
+
+
+def main():
+  parser = argparse.ArgumentParser(
+      description='Generate a graft file from git history.')
+  parser.add_argument('--start-commit',
+                      default='HEAD',
+                      help='The commit to start traversing from.')
+  parser.add_argument('--max-commits',
+                      type=int,
+                      default=float('inf'),
+                      help='The maximum number of commits to traverse.')
+  parser.add_argument('--graft-file',
+                      default='git-grafts.txt',
+                      help='The file to append grafts to.')
+  args = parser.parse_args()
+
+  # Read the existing grafts
+  existing_grafts = read_existing_grafts(args.graft_file)
+  # Get the new grafts from the git history
+  grafts = get_grafts_from_history(args.start_commit, args.max_commits,
+                                   existing_grafts)
+  # Append the new grafts to the graft file
+  append_graft_file(grafts, args.graft_file)
+
+
+if __name__ == '__main__':
+  main()
diff --git a/tools/gritsettings/resource_ids.spec b/tools/gritsettings/resource_ids.spec
index 2f4ab49cbe968..9ed0af8439d70 100644
--- a/tools/gritsettings/resource_ids.spec
+++ b/tools/gritsettings/resource_ids.spec
@@ -2,6 +2,10 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 #
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the
+# components/adblock/LICENSE file.
+#
 # This file is used to assign starting resource ids for resources and strings
 # used by Chromium.  This is done to ensure that resource ids are unique
 # across all the grd files.  If you are adding a new grd file, please add
@@ -1155,6 +1159,14 @@
    "META": {"sizes": {"includes": [30],}},
     "includes": [7480],
   },
+  "components/adblock/core/resources/adblock_resources.grd": {
+    "META": {"sizes": {"includes": [10],}},
+    "includes": [10020],
+  },
+  "<(SHARED_INTERMEDIATE_DIR)/components/adblock/content/resources/adblock_internals/resources.grd": {
+    "META": {"sizes": {"includes": [10],}},
+    "includes": [10040],
+  },
   # END components/ section.
 
   # START ios/ section.
diff --git a/tools/metrics/histograms/metadata/extensions/enums.xml b/tools/metrics/histograms/metadata/extensions/enums.xml
index 2fcccbd161dc0..21bb4901840da 100644
--- a/tools/metrics/histograms/metadata/extensions/enums.xml
+++ b/tools/metrics/histograms/metadata/extensions/enums.xml
@@ -180,7 +180,7 @@ Called by update_extension_histograms.py.-->
   <int value="19" label="APP_WINDOW_ON_MAXIMIZED"/>
   <int value="20" label="APP_WINDOW_ON_MINIMIZED"/>
   <int value="21" label="APP_WINDOW_ON_RESTORED"/>
-  <int value="22" label="DELETED_AUDIO_MODEM_ON_RECEIVED"/>
+  <int value="22" label="EYEO_EVENT"/>
   <int value="23" label="DELETED_AUDIO_MODEM_ON_TRANSMIT_FAIL"/>
   <int value="24" label="DELETED_AUDIO_ON_DEVICE_CHANGED"/>
   <int value="25" label="AUDIO_ON_DEVICES_CHANGED"/>
@@ -3209,6 +3209,9 @@ Called by update_extension_permission.py.-->
   <int value="260" label="kExperimentalAiData"/>
   <int value="261" label="kOmniboxDirectInput"/>
   <int value="262" label="kExperimentalActor"/>
+  <int value="998" label="kEyeoDevToolsPrivate"/>
+  <int value="999" label="kAdblockPrivate"/>
+  <int value="1000" label="kEyeoFilteringPrivate"/>
 </enum>
 
 <enum name="ExtensionPolicyReinstallReason">
diff --git a/tools/perf/benchmarks/eyeo.py b/tools/perf/benchmarks/eyeo.py
new file mode 100644
index 0000000000000..891ff6034bd85
--- /dev/null
+++ b/tools/perf/benchmarks/eyeo.py
@@ -0,0 +1,839 @@
+# This file is part of eyeo Chromium SDK,
+# Copyright (C) 2006-present eyeo GmbH
+#
+# eyeo Chromium SDK is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 3 as
+# published by the Free Software Foundation.
+#
+# eyeo Chromium SDK is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+
+from benchmarks import loading_metrics_category
+
+from core import perf_benchmark
+from core import platforms
+
+from telemetry import benchmark
+from telemetry import story
+from telemetry.timeline import chrome_trace_category_filter
+from telemetry.timeline import chrome_trace_config
+from telemetry.web_perf import timeline_based_measurement
+import page_sets
+
+
+class PerfTestBase(perf_benchmark.PerfBenchmark):
+  is_desktop = False
+
+  @classmethod
+  def AddBenchmarkCommandLineArgs(cls, parser):
+    parser.add_argument('--desktop',
+                        action="store_true",
+                        help="Mobile/Desktop perf-test switch")
+
+  @classmethod
+  def ProcessCommandLineArgs(cls, parser, args):
+    if args.desktop:
+      cls.is_desktop = True
+
+
+# "Inspired" by benchmarks/system_health.py.
+class PerfTimeTests(PerfTestBase):
+  options = {'pageset_repeat': 10}
+
+  def CreateCoreTimelineBasedMeasurementOptions(self):
+    cat_filter = chrome_trace_category_filter.ChromeTraceCategoryFilter(
+        filter_string='rail,toplevel,uma')
+    cat_filter.AddIncludedCategory('eyeo')
+
+    options = timeline_based_measurement.Options(cat_filter)
+    loading_metrics_category.AugmentOptionsForLoadingMetrics(options)
+
+    return options
+
+  def SetExtraBrowserOptions(self, options):
+    options.flush_os_page_caches_on_start = False
+    # Using the software fallback can skew the rendering related metrics. So
+    # disable that.
+    options.AppendExtraBrowserArgs('--disable-software-compositing-fallback')
+    # Force online state for the offline indicator so it doesn't show and affect
+    # the benchmarks on bots, which are offline by default.
+    options.AppendExtraBrowserArgs(
+        '--force-online-connection-state-for-indicator')
+
+
+class PerfMemoryTests(PerfTestBase):
+  options = {'pageset_repeat': 3}
+
+  def CreateCoreTimelineBasedMeasurementOptions(self):
+    cat_filter = chrome_trace_category_filter.ChromeTraceCategoryFilter(
+        filter_string='-*,disabled-by-default-memory-infra')
+    # Needed for the console error metric.
+    cat_filter.AddIncludedCategory('v8.console')
+    cat_filter.AddIncludedCategory('eyeo')
+    options = timeline_based_measurement.Options(cat_filter)
+    options.config.enable_android_graphics_memtrack = True
+    options.SetTimelineBasedMetrics(['consoleErrorMetric', 'memoryMetric'])
+    memory_dump_config = chrome_trace_config.MemoryDumpConfig()
+    # Enable for more frequent memory measurements in memory consumption tests:
+    # memory_dump_config.AddTrigger('light', 1000)
+    options.config.chrome_trace_config.SetMemoryDumpConfig(memory_dump_config)
+    return options
+
+  def SetExtraBrowserOptions(self, options):
+    # Just before we measure memory we flush the system caches
+    # unfortunately this doesn't immediately take effect, instead
+    # the next story run is effected. Due to this the first story run
+    # has anomalous results. This option causes us to flush caches
+    # each time before Chrome starts so we effect even the first story
+    # - avoiding the bug.
+    options.flush_os_page_caches_on_start = True
+    # Force online state for the offline indicator so it doesn't show and affect
+    # the benchmarks on bots, which are offline by default.
+    options.AppendExtraBrowserArgs(
+        '--force-online-connection-state-for-indicator')
+
+
+class MemoryFilterListFullPagesetAdHeavyDisableAdblock(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_adheavy_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoAdHeavyPageSet(take_memory_measurement=True,
+                                        is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetAdHeavyDisableAa(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_adheavy_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoAdHeavyPageSet(take_memory_measurement=True,
+                                        is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetAdHeavyDefault(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_adheavy_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoAdHeavyPageSet(take_memory_measurement=True,
+                                        is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedDisableAdblock(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSet(take_memory_measurement=True,
+                                         is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedDisableAa(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSet(take_memory_measurement=True,
+                                         is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedDefault(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSet(take_memory_measurement=True,
+                                         is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetSmallDisableAdblock(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_small_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoSmallPageSet(take_memory_measurement=True,
+                                      is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetSmallDisableAa(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_small_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoSmallPageSet(take_memory_measurement=True,
+                                      is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetSmallDefault(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_small_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoSmallPageSet(take_memory_measurement=True,
+                                      is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetSingleDisableAdblock(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_single_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoSinglePageSet(take_memory_measurement=True,
+                                       is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetSingleDisableAa(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_single_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoSinglePageSet(take_memory_measurement=True,
+                                       is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetSingleDefault(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_single_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoSinglePageSet(take_memory_measurement=True,
+                                       is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetAdHeavyDisableAdblock(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_adheavy_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoAdHeavyPageSet(take_memory_measurement=False,
+                                        is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetAdHeavyDisableAa(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_adheavy_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoAdHeavyPageSet(take_memory_measurement=False,
+                                        is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetAdHeavyDefault(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_adheavy_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoAdHeavyPageSet(take_memory_measurement=False,
+                                        is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedDisableAdblock(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSet(take_memory_measurement=False,
+                                         is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedDisableAa(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSet(take_memory_measurement=False,
+                                         is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedDefault(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSet(take_memory_measurement=False,
+                                         is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetSmallDisableAdblock(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_small_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoSmallPageSet(take_memory_measurement=False,
+                                      is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetSmallDisableAa(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_small_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoSmallPageSet(take_memory_measurement=False,
+                                      is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetSmallDefault(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_small_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoSmallPageSet(take_memory_measurement=False,
+                                      is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt1DisableAdblock(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt1_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt1(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt1DisableAa(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt1_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt1(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt1Default(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt1_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt1(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt2DisableAdblock(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt2_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt2(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt2DisableAa(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt2_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt2(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt2Default(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt2_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt2(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt3DisableAdblock(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt3_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt3(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt3DisableAa(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt3_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt3(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt3Default(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt3_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt3(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt4DisableAdblock(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt4_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt4(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt4DisableAa(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt4_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt4(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt4Default(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt4_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt4(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt5DisableAdblock(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt5_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt5(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt5DisableAa(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt5_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt5(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt5Default(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt5_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt5(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt6DisableAdblock(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt6_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt6(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt6DisableAa(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt6_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt6(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class MemoryFilterListFullPagesetExtendedPt6Default(PerfMemoryTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.memory_full_filter_list_pageset_extended_pt6_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt6(take_memory_measurement=True,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt1DisableAdblock(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt1_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt1(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt1DisableAa(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt1_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt1(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt1Default(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt1_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt1(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt2DisableAdblock(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt2_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt2(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt2DisableAa(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt2_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt2(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt2Default(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt2_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt2(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt3DisableAdblock(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt3_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt3(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt3DisableAa(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt3_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt3(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt3Default(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt3_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt3(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt4DisableAdblock(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt4_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt4(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt4DisableAa(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt4_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt4(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt4Default(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt4_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt4(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt5DisableAdblock(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt5_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt5(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt5DisableAa(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt5_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt5(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt5Default(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt5_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt5(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt6DisableAdblock(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt6_disable_adblock"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-adblock')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt6(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt6DisableAa(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt6_disable_aa"
+
+  def SetExtraBrowserOptions(self, options):
+    options.AppendExtraBrowserArgs('--disable-aa')
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt6(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
+
+
+class PltFilterListFullPagesetExtendedPt6Default(PerfTimeTests):
+
+  @classmethod
+  def Name(cls):
+    return "eyeo.plt_full_filter_list_pageset_extended_pt6_default"
+
+  def CreateStorySet(self, options):
+    return page_sets.EyeoExtendedPageSetPt6(take_memory_measurement=False,
+                                            is_desktop=self.is_desktop)
diff --git a/tools/perf/page_sets/eyeo_page_set.py b/tools/perf/page_sets/eyeo_page_set.py
new file mode 100644
index 0000000000000..06481802e8e54
--- /dev/null
+++ b/tools/perf/page_sets/eyeo_page_set.py
@@ -0,0 +1,1110 @@
+# This file is part of eyeo Chromium SDK,
+# Copyright (C) 2006-present eyeo GmbH
+#
+# eyeo Chromium SDK is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 3 as
+# published by the Free Software Foundation.
+#
+# eyeo Chromium SDK is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+
+from page_sets.system_health import loading_stories
+from page_sets.system_health import story_tags
+from py_utils import discover
+from telemetry import story
+from telemetry.page import cache_temperature as cache_temperature_module
+from telemetry.page import page as page_module
+
+
+def GetWprArchivesPath(is_desktop=False):
+  return ('../eyeo_data/desktop/' if is_desktop else '../eyeo_data/mobile/') + \
+    'eyeo_misc_full.json'
+
+
+class EyeoStorySet(loading_stories._LoadingStory):
+
+  def __init__(self, story_set, take_memory_measurement, is_desktop):
+    super(EyeoStorySet, self).__init__(story_set, take_memory_measurement)
+    self.is_desktop = is_desktop
+
+  @property
+  def cache_temperature(self):
+    return cache_temperature_module.WARM_BROWSER
+
+
+class Load_office_Story2021(EyeoStorySet):
+  NAME = 'load:media:_office_:2021'
+  URL = 'https://www.office.com/'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.is_desktop:
+      if self.load_count % 2 == 0:
+        action_runner.WaitForElement(text='Accept')
+        action_runner.ClickElement(text='Accept')
+      self.load_count += 1
+
+
+class Load_walmart_Story2021(EyeoStorySet):
+  NAME = 'load:media:_walmart_:2021'
+  URL = 'https://www.walmart.com/'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_pexels_Story2021(EyeoStorySet):
+  NAME = 'load:media:_pexels_:2021'
+  URL = 'https://www.pexels.com/discover/'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_britishcouncil_orgStory2021(EyeoStorySet):
+  NAME = 'load:media:_britishcouncil_org:2021'
+  URL = 'https://www.britishcouncil.org/study-work-abroad/in-uk'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = '#onetrust-accept-btn-handler'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_vegan_Story2021(EyeoStorySet):
+  NAME = 'load:media:vegan_:2021'
+  URL = 'https://vegan.com/info/eating/'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_pucrs_brStory2021(EyeoStorySet):
+  NAME = 'load:media:_pucrs_br:2021'
+  URL = 'https://www.pucrs.br/internacional/pucrs-pelo-mundo/'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = '#banner-lgpd-active'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_ups_Story2021(EyeoStorySet):
+  NAME = 'load:media:_ups_:2021'
+  URL = 'https://www.ups.com/ca/en/Home.page'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load1_gogoanime_aiStory2021(EyeoStorySet):
+  NAME = 'load:media:1_gogoanime_ai:2021'
+  URL = 'https://www1.gogoanime.ai/koi-to-yobu-ni-wa-kimochi-warui-episode-7'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_eclypsia_Story2021(EyeoStorySet):
+  NAME = 'load:media:_eclypsia_:2021'
+  URL = 'https://www.eclypsia.com/fr/blizzard/actualites/jeff-kaplan-vice-president-de-blizzard-quitte-la-societe-et-laisse-overwatch-a-aaron-keller-32837'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = 'button.css-1litn2c'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_lenta_ruStory2021(EyeoStorySet):
+  NAME = 'load:media:lenta_ru:2021'
+  URL = 'https://lenta.ru/news/2021/05/10/ne_golodaem/'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_fishki_netStory2021(EyeoStorySet):
+  NAME = 'load:media:m_fishki_net:2021'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def __init__(self, story_set, take_memory_measurement, is_desktop):
+    self.URL = (
+        'https://fishki.net/3741331-memy-s-osuzhdajuwim-kotikom-kotorye-rassmeshat-ljubogo.html'
+        if is_desktop else
+        'https://m.fishki.net/3741331-memy-s-osuzhdajuwim-kotikom-kotorye-rassmeshat-ljubogo.html'
+    )
+    super(Load_fishki_netStory2021,
+          self).__init__(story_set, take_memory_measurement, is_desktop)
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = '#privacypolicy__close'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_Riau24_comStory2021(EyeoStorySet):
+  NAME = 'load:media:Riau24_com:2021'
+  TAGS = [story_tags.YEAR_2021]
+
+  def __init__(self, story_set, take_memory_measurement, is_desktop):
+    self.URL = 'https://Riau24.com' if is_desktop else 'https://m.Riau24.com'
+    super(Load_Riau24_comStory2021,
+          self).__init__(story_set, take_memory_measurement, is_desktop)
+
+
+class Load_lacote_chStory2021(EyeoStorySet):
+  NAME = 'load:media:_lacote_ch:2021'
+  URL = 'https://www.lacote.ch/articles/economie/'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_novochag_ruStory2021(EyeoStorySet):
+  NAME = 'load:media:_novochag_ru:2021'
+  URL = 'https://www.novochag.ru/home/pets/dva-goda-nazad-devushka-dala-shans-lysomu-naydenyshu-vot-v-kogo-on-vyros/'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.is_desktop:
+      if self.load_count % 2 == 0:
+        cookie_button_selector = 'button.cookies-button-confirm'
+        action_runner.WaitForElement(selector=cookie_button_selector)
+        action_runner.ScrollPageToElement(selector=cookie_button_selector)
+        action_runner.ClickElement(selector=cookie_button_selector)
+      self.load_count += 1
+
+
+class Load_extreme_down_tvStory2021(EyeoStorySet):
+  NAME = 'load:media:_extreme_down_tv:2021'
+  URL = 'https://www.extreme-down.tv/series/vf/82437-ncis-los-angeles-saison-12-french.html'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_freenet_deStory2021(EyeoStorySet):
+  NAME = 'load:media:_freenet_de:2021'
+  URL = 'https://www.freenet.de/index.html'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = ('button#save' if self.is_desktop else
+                                'button.message-button.primary')
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_9gag_Story2021(EyeoStorySet):
+  NAME = 'load:media:9gag_:2021'
+  URL = 'https://9gag.com/gag/aYoOzyx'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = 'button.css-1k47zha'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_idealista_Story2021(EyeoStorySet):
+  NAME = 'load:media:_idealista_:2021'
+  URL = 'https://www.idealista.com/venta-viviendas/madrid/centro/lavapies-embajadores/'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = '#didomi-notice-agree-button'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_195sports_Story2021(EyeoStorySet):
+  NAME = 'load:media:_195sports_:2021'
+  URL = 'https://www.195sports.com/%d8%b3%d9%88%d8%b3%d8%a7-%d9%84%d9%86-%d9%8a%d9%84%d8%b9%d8%a8-%d9%85%d8%b9-%d8%a7%d9%84%d9%85%d9%86%d8%aa%d8%ae%d8%a8-%d8%a7%d9%84%d8%a3%d9%84%d9%85%d8%a7%d9%86%d9%8a-%d8%b1%d8%ba%d9%85-%d8%ad%d8%b5/'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_healthline_Story2021(EyeoStorySet):
+  NAME = 'load:media:_healthline_:2021'
+  URL = 'https://www.healthline.com/health/video/life-to-the-fullest-with-type-2-diabetes-10#1'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = ('button.css-quk35p'
+                                if self.is_desktop else 'button.css-17ksaeu')
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_howstuffworks_Story2021(EyeoStorySet):
+  NAME = 'load:media:_howstuffworks_:2021'
+  URL = 'https://www.howstuffworks.com/search.php?terms=car'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = ('#onetrust-accept-btn-handler' if
+                                self.is_desktop else 'a.banner_continue--3t3Mf')
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_yelp_Story2021(EyeoStorySet):
+  NAME = 'load:media:_yelp_:2021'
+  URL = 'https://www.yelp.com/biz/my-pie-pizzeria-romana-new-york-2'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = '#onetrust-accept-btn-handler'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_ofeminin_plStory2021(EyeoStorySet):
+  NAME = 'load:media:_ofeminin_pl:2021'
+  URL = 'https://www.ofeminin.pl/czas-wolny/szukala-ich-cala-polska-do-dzis-ich-nie-odnaleziono-najglosniejsze-zaginiecia-w-kraju/qlnyber'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = 'button.cmp-button_button.cmp-intro_acceptAll '
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_merriam_webster_Story2021(EyeoStorySet):
+  NAME = 'load:media:_merriam_webster_:2021'
+  URL = 'https://www.merriam-webster.com/dictionary/grade'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = ('#save' if self.is_desktop else
+                                '#onetrust-accept-btn-handler')
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_dw_Story2021(EyeoStorySet):
+  NAME = 'load:media:_dw_:2021'
+  URL = 'https://www.dw.com/en/germany-logs-rise-in-cybercrime-as-pandemic-provides-attack-potential/a-57487775'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = 'a.cookie__btn--ok'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_jneurosci_orgStory2021(EyeoStorySet):
+  NAME = 'load:media:_jneurosci_org:2021'
+  URL = 'https://www.jneurosci.org/content/early/2021/04/15/JNEUROSCI.2456-20.2021'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = 'button.agree-button'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_euronews_Story2021(EyeoStorySet):
+  NAME = 'load:media:_euronews_:2021'
+  URL = 'https://www.euronews.com/travel/2021/05/02/wine-tasting-in-the-loire-valley-exploring-the-world-s-favourite-sauvignon-blanc'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = '#didomi-notice-agree-button'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_forums_macrumors_Story2021(EyeoStorySet):
+  NAME = 'load:media:forums_macrumors_:2021'
+  URL = 'https://forums.macrumors.com/forums/macrumors-com-news-discussion.4/'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_tweakers_netStory2021(EyeoStorySet):
+  NAME = 'load:media:tweakers_net:2021'
+  URL = 'https://tweakers.net/nieuws/181498/alle-smartphones-oppo-krijgen-drie-jaar-updates-in-plaats-van-twee-jaar.html'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.is_desktop or self.load_count % 2 == 0:
+      cookie_button_selector = 'button.ctaButton'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_ellitoral_Story2021(EyeoStorySet):
+  NAME = 'load:media:_ellitoral_:2021'
+  URL = 'https://www.ellitoral.com/index.php/id_um/297441-reutemann-volvio-a-sufrir-una-hemorragia-en-su-sistema-digestivo-internado-en-rosario-politica-internado-en-rosario.html'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_yandex_ruStory2021(EyeoStorySet):
+  NAME = 'load:media:yandex_ru:2021'
+  URL = 'https://yandex.ru/video/search?text=iphone&from=tabbar'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = 'button.sc-jrsJCI'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_ria_ruStory2021(EyeoStorySet):
+  NAME = 'load:media:ria_ru:2021'
+  URL = 'https://ria.ru/'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_genpi_coStory2021(EyeoStorySet):
+  NAME = 'load:media:_genpi_co:2021'
+  URL = 'https://www.genpi.co/'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_nytimes_Story2021(EyeoStorySet):
+  NAME = 'load:media:_nytimes_:2021'
+  URL = 'https://www.nytimes.com/'
+  TAGS = [story_tags.YEAR_2021]
+
+  def _DidLoadDocument(self, action_runner):
+    if self.is_desktop:
+      cookie_button_selector = 'button.css-aovwtd'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+
+
+class Load_speedtest_netStory2021(EyeoStorySet):
+  NAME = 'load:media:_speedtest_net:2021'
+  URL = 'https://www.speedtest.net/'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = '#_evidon-banner-acceptbutton'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_extra_globo_Story2021(EyeoStorySet):
+  NAME = 'load:media:extra_globo_:2021'
+  URL = 'https://extra.globo.com/economia/emprego/servidor-publico/estado-do-rio-paga-integralmente-salarios-de-julho-dos-servidores-nesta-quarta-feira-dia-14-23872729.html'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = 'button.cookie-banner-lgpd_accept-button'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_OlxStory2021(EyeoStorySet):
+  NAME = 'load:media:olx:2021'
+  URL = 'https://www.olx.ro/auto-masini-moto-ambarcatiuni/'
+  TAGS = [story_tags.YEAR_2021]
+
+  def _DidLoadDocument(self, action_runner):
+    cookie_button_selector = '[id="onetrust-accept-btn-handler"]'
+    action_runner.WaitForElement(selector=cookie_button_selector)
+    action_runner.ScrollPageToElement(selector=cookie_button_selector)
+    action_runner.ClickElement(selector=cookie_button_selector)
+    action_runner.ScrollPage(use_touch=True, distance=3000)
+
+
+class Load_techradar_Story2021(EyeoStorySet):
+  NAME = 'load:media:_techradar_:2021'
+  URL = 'https://www.techradar.com/news/write-once-run-anywhere-google-flutter-20-could-make-every-app-developers-dream-a-reality'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = ('[class=" css-47sehv"]'
+                                if self.is_desktop else '[class=" css-flk0bs"]')
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_npr_orgStory2021(EyeoStorySet):
+  NAME = 'load:media:_npr_org:2021'
+  URL = 'https://www.npr.org/2021/04/19/988628114/europes-top-soccer-teams-announce-new-super-league'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = 'button.user-action--accept'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_youtube_Story2021(EyeoStorySet):
+  NAME = 'load:media:_youtube_:2021'
+  URL = 'https://www.youtube.com/results?search_query=casey+neistat'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Loaden_wikipedia_orgStory2021(EyeoStorySet):
+  NAME = 'load:media:en_wikipedia_org:2021'
+  URL = 'https://en.wikipedia.org/wiki/Adblock_Plus'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_search_yahoo_Story2021(EyeoStorySet):
+  NAME = 'load:media:search_yahoo_:2021'
+  URL = 'https://search.yahoo.com/search?p=iphone'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.is_desktop or self.load_count % 2 == 0:
+      cookie_button_selector = 'button.primary'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_stackoverflow_Story2021(EyeoStorySet):
+  NAME = 'load:media:stackoverflow_:2021'
+  URL = 'https://stackoverflow.com/questions/66689652/microstack-network-multi-node'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.is_desktop or self.load_count % 2 == 0:
+      cookie_button_selector = 'button.js-accept-cookies'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_amazon_Story2021(EyeoStorySet):
+  NAME = 'load:media:_amazon_:2021'
+  URL = 'https://www.amazon.com/s?k=iphone&ref=nb_sb_noss_2'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_google_Story2021(EyeoStorySet):
+  NAME = 'load:media:_google_:2021'
+  URL = 'https://www.google.com/search?q=laptops'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if not self.is_desktop and self.load_count % 2 == 0:
+      cookie_button_selector = '#zV9nZe'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_thesun_co_ukStory2021(EyeoStorySet):
+  NAME = 'load:media:_thesun_co_uk:2021'
+  URL = 'https://www.thesun.co.uk/news/14919640/brit-mum-tortured-death-baby-burglars-greece/'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = '#message-button'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_elmundo_esStory2021(EyeoStorySet):
+  NAME = 'load:media:_elmundo_es:2021'
+  URL = 'https://www.elmundo.es/cronica/2021/05/08/6095e471fdddffb3428b4614.html'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = '#didomi-notice-agree-button'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_jooble_orgStory2021(EyeoStorySet):
+  NAME = 'load:media:jooble_org:2021'
+  URL = 'https://jooble.org/SearchResult?ukw=d'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.is_desktop or self.load_count % 2 == 0:
+      cookie_button_selector = '[class="_3264f button_default button_size_M _2b57b e539c _69517"]'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_meteocity_Story2021(EyeoStorySet):
+  NAME = 'load:media:_meteocity_:2021'
+  URL = 'https://www.meteocity.com/france/cote-dor-d3023423'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = '#didomi-notice-agree-button'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_msn_Story2021(EyeoStorySet):
+  NAME = 'load:media:_msn_:2021'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def __init__(self, story_set, take_memory_measurement, is_desktop):
+    self.URL = 'https://www.msn.com/de-de/nachrichten/' + \
+      ('politik/inflation-pandemie-krieg-%e2%80%93-in-krisen-zeigt-sich-dass-wir-mehr-staat-brauchen/ar-AAVCvaw?li=BBqg6Q9'
+      if is_desktop else
+      'coronavirus/falsche-angaben-impf-betr%c3%bcger-tausende-vordr%c3%a4ngler-werden-derzeit-nicht-bestraft/ar-BB1gAVJD?li=BBqg6Q9')
+    super(Load_msn_Story2021, self).__init__(story_set, take_memory_measurement,
+                                             is_desktop)
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = '#onetrust-accept-btn-handler'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_eldiario_esStory2021(EyeoStorySet):
+  NAME = 'load:media:_eldiario_es:2021'
+  URL = 'https://www.eldiario.es/politica/'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = (
+          '#didomi-notice-agree-button' if self.is_desktop else
+          'div.sibbo-panel__aside__buttons > a:nth-child(1)')
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_buzzfeed_Story2021(EyeoStorySet):
+  NAME = 'load:media:_buzzfeed_:2021'
+  URL = 'https://www.buzzfeed.com/anamariaglavan/best-cheap-bathroom-products?origin=hpp'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = ('button.css-2wu0d3'
+                                if self.is_desktop else 'button.css-15dhgct')
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_money_cnn_Story2021(EyeoStorySet):
+  NAME = 'load:media:money_cnn_:2021'
+  URL = 'https://money.cnn.com/2015/07/30/investing/gold-prices-could-drop-to-350/index.html?iid=hp-toplead-dom'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = 'button#onetrust-accept-btn-handler'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_scotch_ioStory2021(EyeoStorySet):
+  NAME = 'load:media:scotch_io:2021'
+  URL = 'https://scotch.io/tutorials/build-a-star-rating-component-for-react'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_stars242021(EyeoStorySet):
+  NAME = 'load:media:starts24:2021'
+  URL = 'https://stars24.cz/aktualne-z-internetu/24254-17-listopad-a-obchody-je-otevreno-od-stredy-bude-platit-kritizovane-opatreni'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.is_desktop or self.load_count % 2 == 0:
+      cookie_button_selector = ('button.fc-cta-consent' if self.is_desktop else
+                                'button#onetrust-accept-btn-handler')
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_idnes_czStory2021(EyeoStorySet):
+  NAME = 'load:media:_idnes_cz:2021'
+  URL = 'https://www.idnes.cz/zpravy/zahranicni/jeruzalem-hamas-izrael-rakety-palestina-nepokoje.A210510_175323_zahranicni_jhr'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = ('#didomi-notice-agree-button' if self.is_desktop
+                                else 'button#onetrust-accept-btn-handler')
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class Load_5euros_Story2021(EyeoStorySet):
+  NAME = 'load:media:5euros_:2021'
+  URL = 'https://5euros.com/service/60390/faire-un-montage-video-professionnel-10'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.is_desktop:
+      if self.load_count % 2 == 0:
+        cookie_button_selector = 'button.cky-btn-accept'
+        action_runner.WaitForElement(selector=cookie_button_selector)
+        action_runner.ScrollPageToElement(selector=cookie_button_selector)
+        action_runner.ClickElement(selector=cookie_button_selector)
+      self.load_count += 1
+
+
+class Load_poder360__brStory2021(EyeoStorySet):
+  NAME = 'load:media:_poder360__br:2021'
+  URL = 'https://www.poder360.com.br/governo/bolsonaro-nega-orcamento-secreto-e-diz-que-apanha-da-imprensa/'
+  TAGS = [story_tags.YEAR_2021]
+
+
+class Load_petfarmfamily_Story2021(EyeoStorySet):
+  NAME = 'load:media:petfarmfamily_:2021'
+  URL = 'https://petfarmfamily.com/collections/accessories'
+  TAGS = [story_tags.YEAR_2021]
+  load_count = 0
+
+  def _DidLoadDocument(self, action_runner):
+    if self.load_count % 2 == 0:
+      cookie_button_selector = 'button.react-cookie-law-accept-btn'
+      action_runner.WaitForElement(selector=cookie_button_selector)
+      action_runner.ScrollPageToElement(selector=cookie_button_selector)
+      action_runner.ClickElement(selector=cookie_button_selector)
+    self.load_count += 1
+
+
+class EyeoExtendedPageSet(story.StorySet):
+
+  def __init__(self, is_desktop, take_memory_measurement=False):
+    super(EyeoExtendedPageSet,
+          self).__init__(archive_data_file=GetWprArchivesPath(is_desktop),
+                         cloud_storage_bucket=None)
+
+    self.AddStory(
+        Load_195sports_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_britishcouncil_orgStory2021(self, take_memory_measurement,
+                                         is_desktop))
+    self.AddStory(Load_dw_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_eldiario_esStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_ellitoral_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_euronews_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_genpi_coStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_novochag_ruStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_healthline_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_howstuffworks_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_idealista_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_idnes_czStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_jneurosci_orgStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_lacote_chStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_meteocity_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(Load_msn_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_nytimes_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_ofeminin_plStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_office_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_speedtest_netStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(Load_stars242021(self, take_memory_measurement, is_desktop))
+    self.AddStory(Load_ups_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(Load_yelp_Story2021(self, take_memory_measurement,
+                                      is_desktop))
+    self.AddStory(
+        Load_5euros_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_extra_globo_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_jooble_orgStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_lenta_ruStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_fishki_netStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_money_cnn_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_petfarmfamily_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_search_yahoo_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_tweakers_netStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_Riau24_comStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_vegan_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_yandex_ruStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_npr_orgStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_stackoverflow_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Loaden_wikipedia_orgStory2021(self, take_memory_measurement,
+                                      is_desktop))
+    self.AddStory(
+        Load_amazon_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_google_Story2021(self, take_memory_measurement, is_desktop))
+    if not is_desktop:
+      self.AddStory(
+          Load_youtube_Story2021(self, take_memory_measurement, is_desktop))
+      self.AddStory(
+          Load_extreme_down_tvStory2021(self, take_memory_measurement,
+                                        is_desktop))
+      self.AddStory(
+          Load_merriam_webster_Story2021(self, take_memory_measurement,
+                                         is_desktop))
+      self.AddStory(
+          Load_poder360__brStory2021(self, take_memory_measurement, is_desktop))
+      self.AddStory(
+          Load_pucrs_brStory2021(self, take_memory_measurement, is_desktop))
+      self.AddStory(
+          Load_forums_macrumors_Story2021(self, take_memory_measurement,
+                                          is_desktop))
+      self.AddStory(
+          Load_scotch_ioStory2021(self, take_memory_measurement, is_desktop))
+      self.AddStory(
+          Load_walmart_Story2021(self, take_memory_measurement, is_desktop))
+      self.AddStory(
+          Load_ria_ruStory2021(self, take_memory_measurement, is_desktop))
+    else:
+      self.AddStory(
+          Load_buzzfeed_Story2021(self, take_memory_measurement, is_desktop))
+
+
+class EyeoAdHeavyPageSet(story.StorySet):
+
+  def __init__(self, is_desktop, take_memory_measurement=False):
+    super(EyeoAdHeavyPageSet,
+          self).__init__(archive_data_file=GetWprArchivesPath(is_desktop),
+                         cloud_storage_bucket=None)
+
+    self.AddStory(
+        Load_novochag_ruStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_idnes_czStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_lacote_chStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_meteocity_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(Load_msn_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_ofeminin_plStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_jooble_orgStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_lenta_ruStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_fishki_netStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_Riau24_comStory2021(self, take_memory_measurement, is_desktop))
+    if not is_desktop:
+      self.AddStory(
+          Load_merriam_webster_Story2021(self, take_memory_measurement,
+                                         is_desktop))
+      self.AddStory(
+          Load_extreme_down_tvStory2021(self, take_memory_measurement,
+                                        is_desktop))
+
+
+class EyeoExtendedPageSetPt1(story.StorySet):
+
+  def __init__(self, is_desktop, take_memory_measurement=False):
+    super(EyeoExtendedPageSetPt1,
+          self).__init__(archive_data_file=GetWprArchivesPath(is_desktop),
+                         cloud_storage_bucket=None)
+
+    self.AddStory(
+        Load_195sports_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_britishcouncil_orgStory2021(self, take_memory_measurement,
+                                         is_desktop))
+    self.AddStory(Load_dw_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_eldiario_esStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_ellitoral_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_euronews_Story2021(self, take_memory_measurement, is_desktop))
+    if not is_desktop:
+      self.AddStory(
+          Load_extreme_down_tvStory2021(self, take_memory_measurement,
+                                        is_desktop))
+    else:
+      self.AddStory(
+          Load_buzzfeed_Story2021(self, take_memory_measurement, is_desktop))
+
+
+class EyeoExtendedPageSetPt2(story.StorySet):
+
+  def __init__(self, is_desktop, take_memory_measurement=False):
+    super(EyeoExtendedPageSetPt2,
+          self).__init__(archive_data_file=GetWprArchivesPath(is_desktop),
+                         cloud_storage_bucket=None)
+
+    self.AddStory(
+        Load_genpi_coStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_novochag_ruStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_healthline_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_howstuffworks_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_idealista_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_idnes_czStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_jneurosci_orgStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_lacote_chStory2021(self, take_memory_measurement, is_desktop))
+
+
+class EyeoExtendedPageSetPt3(story.StorySet):
+
+  def __init__(self, is_desktop, take_memory_measurement=False):
+    super(EyeoExtendedPageSetPt3,
+          self).__init__(archive_data_file=GetWprArchivesPath(is_desktop),
+                         cloud_storage_bucket=None)
+
+    self.AddStory(
+        Load_meteocity_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(Load_msn_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_nytimes_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_ofeminin_plStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_office_Story2021(self, take_memory_measurement, is_desktop))
+    if not is_desktop:
+      self.AddStory(
+          Load_merriam_webster_Story2021(self, take_memory_measurement,
+                                         is_desktop))
+      self.AddStory(
+          Load_poder360__brStory2021(self, take_memory_measurement, is_desktop))
+      self.AddStory(
+          Load_pucrs_brStory2021(self, take_memory_measurement, is_desktop))
+
+
+class EyeoExtendedPageSetPt4(story.StorySet):
+
+  def __init__(self, is_desktop, take_memory_measurement=False):
+    super(EyeoExtendedPageSetPt4,
+          self).__init__(archive_data_file=GetWprArchivesPath(is_desktop),
+                         cloud_storage_bucket=None)
+
+    self.AddStory(
+        Load_speedtest_netStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(Load_stars242021(self, take_memory_measurement, is_desktop))
+    self.AddStory(Load_ups_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(Load_yelp_Story2021(self, take_memory_measurement,
+                                      is_desktop))
+    self.AddStory(
+        Load_5euros_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_extra_globo_Story2021(self, take_memory_measurement, is_desktop))
+    if not is_desktop:
+      self.AddStory(
+          Load_walmart_Story2021(self, take_memory_measurement, is_desktop))
+      self.AddStory(
+          Load_forums_macrumors_Story2021(self, take_memory_measurement,
+                                          is_desktop))
+
+
+class EyeoExtendedPageSetPt5(story.StorySet):
+
+  def __init__(self, is_desktop, take_memory_measurement=False):
+    super(EyeoExtendedPageSetPt5,
+          self).__init__(archive_data_file=GetWprArchivesPath(is_desktop),
+                         cloud_storage_bucket=None)
+
+    self.AddStory(
+        Load_jooble_orgStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_lenta_ruStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_fishki_netStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_money_cnn_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_petfarmfamily_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_search_yahoo_Story2021(self, take_memory_measurement, is_desktop))
+    if not is_desktop:
+      self.AddStory(
+          Load_ria_ruStory2021(self, take_memory_measurement, is_desktop))
+      self.AddStory(
+          Load_scotch_ioStory2021(self, take_memory_measurement, is_desktop))
+
+
+class EyeoExtendedPageSetPt6(story.StorySet):
+
+  def __init__(self, is_desktop, take_memory_measurement=False):
+    super(EyeoExtendedPageSetPt6,
+          self).__init__(archive_data_file=GetWprArchivesPath(is_desktop),
+                         cloud_storage_bucket=None)
+
+    self.AddStory(
+        Load_tweakers_netStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_Riau24_comStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_vegan_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_yandex_ruStory2021(self, take_memory_measurement, is_desktop))
+
+
+class EyeoSmallPageSet(story.StorySet):
+
+  def __init__(self, is_desktop, take_memory_measurement=False):
+    super(EyeoSmallPageSet,
+          self).__init__(archive_data_file=GetWprArchivesPath(is_desktop),
+                         cloud_storage_bucket=None)
+
+    self.AddStory(
+        Load_npr_orgStory2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_stackoverflow_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Loaden_wikipedia_orgStory2021(self, take_memory_measurement,
+                                      is_desktop))
+    self.AddStory(
+        Load_amazon_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_google_Story2021(self, take_memory_measurement, is_desktop))
+    self.AddStory(
+        Load_jooble_orgStory2021(self, take_memory_measurement, is_desktop))
+    if not is_desktop:
+      self.AddStory(
+          Load_youtube_Story2021(self, take_memory_measurement, is_desktop))
+    else:
+      self.AddStory(
+          Load_lacote_chStory2021(self, take_memory_measurement, is_desktop))
+
+
+class EyeoSinglePageSet(story.StorySet):
+
+  def __init__(self, is_desktop, take_memory_measurement=False):
+    super(EyeoSinglePageSet,
+          self).__init__(archive_data_file=GetWprArchivesPath(is_desktop),
+                         cloud_storage_bucket=None)
+
+    self.AddStory(
+        Load_fishki_netStory2021(self, take_memory_measurement, is_desktop))
diff --git a/tools/typescript/definitions/adblock_private.d.ts b/tools/typescript/definitions/adblock_private.d.ts
new file mode 100644
index 0000000000000..71a5100cf4b62
--- /dev/null
+++ b/tools/typescript/definitions/adblock_private.d.ts
@@ -0,0 +1,182 @@
+// This file is part of eyeo Chromium SDK,
+// Copyright (C) 2006-present eyeo GmbH
+//
+// eyeo Chromium SDK is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 3 as
+// published by the Free Software Foundation.
+//
+// eyeo Chromium SDK is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+
+/** @fileoverview Type definitions for chrome.adblockPrivate API. */
+
+import {ChromeEvent} from './chrome_event.js';
+
+declare global {
+  export namespace chrome {
+    export namespace adblockPrivate {
+
+      export interface BuiltInSubscription {
+        url: string;
+        title: string;
+        languages: string[];
+      }
+
+      export interface Subscription {
+        url: string;
+        installation_state: string;
+        title: string;
+        current_version: string;
+        last_installation_time: string;
+      }
+
+      export interface SessionStatsEntry {
+        url: string;
+        count: number;
+      }
+
+      export interface AdInfo {
+        url: string;
+        parent_frame_urls: string[];
+        subscription: string;
+        configuration_name: string;
+        content_type: string;
+        tab_id: number;
+        window_id: number;
+      }
+
+      export const onAdAllowed: ChromeEvent<(
+        info: AdInfo,
+      ) => void>;
+
+      export const onAdBlocked: ChromeEvent<(
+        info: AdInfo,
+      ) => void>;
+
+      export const onPageAllowed: ChromeEvent<(
+        info: AdInfo,
+      ) => void>;
+
+      export const onPopupBlocked: ChromeEvent<(
+        info: AdInfo,
+      ) => void>;
+
+      export const onPopupAllowed: ChromeEvent<(
+        info: AdInfo,
+      ) => void>;
+
+      export const onSubscriptionUpdated: ChromeEvent<(
+        subscription_url: string,
+      ) => void>;
+
+      export const onEnabledStateChanged: ChromeEvent<(
+      ) => void>;
+
+      export const onFilterListsChanged: ChromeEvent<(
+      ) => void>;
+
+      export const onAllowedDomainsChanged: ChromeEvent<(
+      ) => void>;
+
+      export const onCustomFiltersChanged: ChromeEvent<(
+      ) => void>;
+
+      export function setEnabled(
+        enabled: boolean,
+      ): void;
+
+      export function isEnabled(
+        callback: (
+          result: boolean,
+        ) => void,
+      ): void;
+
+      export function setAcceptableAdsEnabled(
+        enabled: boolean,
+      ): void;
+
+      export function isAcceptableAdsEnabled(
+        callback: (
+          result: boolean,
+        ) => void,
+      ): void;
+
+      export function setAutoInstallEnabled(
+        enabled: boolean,
+      ): void;
+
+      export function isAutoInstallEnabled(
+        callback: (
+          result: boolean,
+        ) => void,
+      ): void;
+
+      export function getBuiltInSubscriptions(
+        callback: (
+          result: BuiltInSubscription[],
+        ) => void,
+      ): void;
+
+      export function addAllowedDomain(
+        domain: string,
+      ): void;
+
+      export function removeAllowedDomain(
+        domain: string,
+      ): void;
+
+      export function getAllowedDomains(
+        callback: (
+          result: string[],
+        ) => void,
+      ): void;
+
+      export function addCustomFilter(
+        filter: string,
+      ): void;
+
+      export function removeCustomFilter(
+        filter: string,
+      ): void;
+
+      export function getCustomFilters(
+        callback: (
+          result: string[],
+        ) => void,
+      ): void;
+
+      export function getSessionAllowedAdsCount(
+        callback: (
+          result: SessionStatsEntry[],
+        ) => void,
+      ): void;
+
+      export function getSessionBlockedAdsCount(
+        callback: (
+          result: SessionStatsEntry[],
+        ) => void,
+      ): void;
+
+      export function getInstalledSubscriptions(
+        callback: (
+          result: Subscription[],
+        ) => void,
+      ): void;
+
+      export function installSubscription(
+        url: string,
+        feedback?: () => void,
+      ): void;
+
+      export function uninstallSubscription(
+        url: string,
+        feedback?: () => void,
+      ): void;
+    }
+  }
+}
diff --git a/tools/typescript/definitions/eyeo_filtering_private.d.ts b/tools/typescript/definitions/eyeo_filtering_private.d.ts
new file mode 100644
index 0000000000000..f5f665afbd8f9
--- /dev/null
+++ b/tools/typescript/definitions/eyeo_filtering_private.d.ts
@@ -0,0 +1,266 @@
+// This file is part of eyeo Chromium SDK,
+// Copyright (C) 2006-present eyeo GmbH
+//
+// eyeo Chromium SDK is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 3 as
+// published by the Free Software Foundation.
+//
+// eyeo Chromium SDK is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+
+/** @fileoverview Type definitions for chrome.eyeoFilteringPrivate API. */
+
+import {ChromeEvent} from './chrome_event.js';
+
+declare global {
+  export namespace chrome {
+    export namespace eyeoFilteringPrivate {
+
+      export interface Subscription {
+        url: string;
+        installation_state: string;
+        title: string;
+        current_version: string;
+        last_installation_time: string;
+      }
+
+      export interface SessionStatsEntry {
+        url: string;
+        count: number;
+      }
+
+      export interface RequestInfo {
+        url: string;
+        parent_frame_urls: string[];
+        subscription: string;
+        configuration_name: string;
+        content_type: string;
+        tab_id: number;
+        window_id: number;
+      }
+
+      export const onRequestAllowed: ChromeEvent<(
+        info: RequestInfo,
+      ) => void>;
+
+      export const onRequestBlocked: ChromeEvent<(
+        info: RequestInfo,
+      ) => void>;
+
+      export const onPageAllowed: ChromeEvent<(
+        info: RequestInfo,
+      ) => void>;
+
+      export const onPopupBlocked: ChromeEvent<(
+        info: RequestInfo,
+      ) => void>;
+
+      export const onPopupAllowed: ChromeEvent<(
+        info: RequestInfo,
+      ) => void>;
+
+      export const onSubscriptionUpdated: ChromeEvent<(
+        subscription_url: string,
+      ) => void>;
+
+      export const onEnabledStateChanged: ChromeEvent<(
+        config_name: string,
+      ) => void>;
+
+      export const onFilterListsChanged: ChromeEvent<(
+        config_name: string,
+      ) => void>;
+
+      export const onAllowedDomainsChanged: ChromeEvent<(
+        config_name: string,
+      ) => void>;
+
+      export const onCustomFiltersChanged: ChromeEvent<(
+        config_name: string,
+      ) => void>;
+
+      export function createConfiguration(
+        config_name: string,
+      ): void;
+
+      export function removeConfiguration(
+        config_name: string,
+      ): void;
+
+      export function getConfigurations(): Promise<string[]>;
+
+      export function getConfigurations(
+        callback?: (
+          result: string[],
+        ) => void,
+      ): void;
+
+      export function setEnabled(
+        configuration: string,
+        enabled: boolean,
+      ): Promise<void>;
+
+      export function setEnabled(
+        configuration: string,
+        enabled: boolean,
+        status?: () => void,
+      ): void;
+
+      export function isEnabled(
+        configuration: string,
+      ): Promise<boolean>;
+
+      export function isEnabled(
+        configuration: string,
+        callback?: (
+          result: boolean,
+        ) => void,
+      ): void;
+
+      export function setAutoInstallEnabled(
+        enabled: boolean,
+      ): Promise<void>;
+
+      export function setAutoInstallEnabled(
+        enabled: boolean,
+        status?: () => void,
+      ): void;
+
+      export function isAutoInstallEnabled(): Promise<boolean>;
+
+      export function isAutoInstallEnabled(
+        callback?: (
+          result: boolean,
+        ) => void,
+      ): void;
+
+      export function addAllowedDomain(
+        configuration: string,
+        domain: string,
+      ): Promise<void>;
+
+      export function addAllowedDomain(
+        configuration: string,
+        domain: string,
+        status?: () => void,
+      ): void;
+
+      export function removeAllowedDomain(
+        configuration: string,
+        domain: string,
+      ): Promise<void>;
+
+      export function removeAllowedDomain(
+        configuration: string,
+        domain: string,
+        status?: () => void,
+      ): void;
+
+      export function getAllowedDomains(
+        configuration: string,
+      ): Promise<string[]>;
+
+      export function getAllowedDomains(
+        configuration: string,
+        callback?: (
+          result: string[],
+        ) => void,
+      ): void;
+
+      export function addCustomFilter(
+        configuration: string,
+        filter: string,
+      ): Promise<void>;
+
+      export function addCustomFilter(
+        configuration: string,
+        filter: string,
+        status?: () => void,
+      ): void;
+
+      export function removeCustomFilter(
+        configuration: string,
+        filter: string,
+      ): Promise<void>;
+
+      export function removeCustomFilter(
+        configuration: string,
+        filter: string,
+        status?: () => void,
+      ): void;
+
+      export function getCustomFilters(
+        configuration: string,
+      ): Promise<string[]>;
+
+      export function getCustomFilters(
+        configuration: string,
+        callback?: (
+          result: string[],
+        ) => void,
+      ): void;
+
+      export function getFilterLists(
+        configuration: string,
+      ): Promise<Subscription[]>;
+
+      export function getFilterLists(
+        configuration: string,
+        callback?: (
+          result: Subscription[],
+        ) => void,
+      ): void;
+
+      export function addFilterList(
+        configuration: string,
+        url: string,
+      ): Promise<void>;
+
+      export function addFilterList(
+        configuration: string,
+        url: string,
+        status?: () => void,
+      ): void;
+
+      export function removeFilterList(
+        configuration: string,
+        url: string,
+      ): Promise<void>;
+
+      export function removeFilterList(
+        configuration: string,
+        url: string,
+        status?: () => void,
+      ): void;
+
+      export function getSessionAllowedRequestsCount(): Promise<SessionStatsEntry[]>;
+
+      export function getSessionAllowedRequestsCount(
+        callback?: (
+          result: SessionStatsEntry[],
+        ) => void,
+      ): void;
+
+      export function getSessionBlockedRequestsCount(): Promise<SessionStatsEntry[]>;
+
+      export function getSessionBlockedRequestsCount(
+        callback?: (
+          result: SessionStatsEntry[],
+        ) => void,
+      ): void;
+
+      export function getAcceptableAdsUrl(): Promise<string>;
+
+      export function getAcceptableAdsUrl(
+        callback?: (
+          result: string,
+        ) => void,
+      ): void;
+    }
+  }
+}
-- 
2.43.0

