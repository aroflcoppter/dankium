From e58751709bd523efab2d48b56043cad3c1d59455 Mon Sep 17 00:00:00 2001
From: aroflcoppter <contact@dankium.ca>
Date: Wed, 4 Jun 2025 18:22:49 -0230
Subject: [PATCH] more build fixes

---
 chrome/browser/about_flags.cc                       | 13 ++-----------
 chrome/browser/browser_features.cc                  |  3 ++-
 chrome/browser/download/download_request_limiter.cc |  1 +
 .../core/browser/content_settings_utils.cc          |  4 +++-
 .../core/browser/cookie_settings.cc                 | 10 ++++++----
 .../core/browser/host_content_settings_map.cc       |  1 +
 .../content_settings/core/common/content_settings.h | 11 +----------
 .../core/common/content_settings.mojom              |  1 +
 .../core/common/content_settings_mojom_traits.cc    |  4 ++++
 .../omnibox/browser/location_bar_model_util.cc      |  1 +
 components/page_info/page_info_ui.cc                | 10 ++++++++--
 components/payments/content/ssl_validity_checker.cc |  1 +
 components/permissions/permission_util.cc           |  1 +
 components/security_state/core/security_state.cc    |  4 ++--
 components/security_state/core/security_state.h     |  2 +-
 .../service/variations_field_trial_creator_base.cc  |  1 -
 16 files changed, 35 insertions(+), 33 deletions(-)

diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index 7c1ead6863041..fa9ee1393ee8e 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -5422,7 +5422,8 @@ const FeatureEntry kFeatureEntries[] = {
      kOsCrOS | kOsLinux | kOsAndroid,
      FEATURE_VALUE_TYPE(mojo::core::kMojoLinuxChannelSharedMem)},
 #endif
-#if BUILDFLAG(IS_OFFICIAL_BUILD)
+#if (BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_IOS) || \
+     BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_FUCHSIA))
     {"enable-site-isolation-for-password-sites",
      flag_descriptions::kSiteIsolationForPasswordSitesName,
      flag_descriptions::kSiteIsolationForPasswordSitesDescription, kOsAndroid,
@@ -5433,16 +5434,6 @@ const FeatureEntry kFeatureEntries[] = {
      SINGLE_VALUE_TYPE(switches::kSitePerProcess)},
 #endif
 
-#if BUILDFLAG(!IS_OFFICIAL_BUILD)
-    {"enable-site-isolation-for-password-sites",
-     flag_descriptions::kSiteIsolationForPasswordSitesName,
-     flag_descriptions::kSiteIsolationForPasswordSitesDescription, kOsAndroid,
-     FEATURE_VALUE_TYPE(
-         site_isolation::features::kSiteIsolationForPasswordSites)},
-    {"enable-site-per-process", flag_descriptions::kStrictSiteIsolationName,
-     flag_descriptions::kStrictSiteIsolationDescription, kOsAndroid,
-     SINGLE_VALUE_TYPE(switches::kSitePerProcess)},
-#endif
 #if !BUILDFLAG(IS_ANDROID)
 #if !BUILDFLAG(IS_CHROMEOS)
     {"enable-isolated-web-apps", flag_descriptions::kEnableIsolatedWebAppsName,
diff --git a/chrome/browser/browser_features.cc b/chrome/browser/browser_features.cc
index 759a1bcff8473..9b5f7f5723218 100644
--- a/chrome/browser/browser_features.cc
+++ b/chrome/browser/browser_features.cc
@@ -49,7 +49,8 @@ BASE_FEATURE(kBookmarkTriggerForPrerender2,
 // switch.
 BASE_FEATURE(kCertificateTransparencyAskBeforeEnabling,
              "CertificateTransparencyAskBeforeEnabling",
-#if BUILDFLAG(!GOOGLE_CHROME_BRANDING)
+#if (BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_IOS) || \
+     BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_FUCHSIA))
              base::FEATURE_ENABLED_BY_DEFAULT);
 #else
              base::FEATURE_DISABLED_BY_DEFAULT);
diff --git a/chrome/browser/download/download_request_limiter.cc b/chrome/browser/download/download_request_limiter.cc
index 4c525caf60852..a98d326fe17f2 100644
--- a/chrome/browser/download/download_request_limiter.cc
+++ b/chrome/browser/download/download_request_limiter.cc
@@ -52,6 +52,7 @@ DownloadRequestLimiter::DownloadStatus GetDownloadStatusFromSetting(
   switch (setting) {
     case CONTENT_SETTING_ALLOW:
       return DownloadRequestLimiter::ALLOW_ALL_DOWNLOADS;
+    case DANK_CONTENT_SETTING_BLOCK:
     case CONTENT_SETTING_BLOCK:
       return DownloadRequestLimiter::DOWNLOADS_NOT_ALLOWED;
     case CONTENT_SETTING_DEFAULT:
diff --git a/components/content_settings/core/browser/content_settings_utils.cc b/components/content_settings/core/browser/content_settings_utils.cc
index d7a7ca647fbce..5471a34dde6c3 100644
--- a/components/content_settings/core/browser/content_settings_utils.cc
+++ b/components/content_settings/core/browser/content_settings_utils.cc
@@ -37,6 +37,7 @@ const auto kContentSettingsStringMapping =
         {CONTENT_SETTING_ASK, "ask"},
         {CONTENT_SETTING_SESSION_ONLY, "session_only"},
         {CONTENT_SETTING_DETECT_IMPORTANT_CONTENT, "detect_important_content"},
+        {DANK_CONTENT_SETTING_BLOCK, "block"},
     });
 static_assert(std::size(kContentSettingsStringMapping) ==
                   CONTENT_SETTING_NUM_SETTINGS,
@@ -55,7 +56,8 @@ const ContentSetting kContentSettingOrder[] = {
     CONTENT_SETTING_SESSION_ONLY,
     CONTENT_SETTING_DETECT_IMPORTANT_CONTENT,
     CONTENT_SETTING_ASK,
-    CONTENT_SETTING_BLOCK
+    CONTENT_SETTING_BLOCK,
+    DANK_CONTENT_SETTING_BLOCK
     // clang-format on
 };
 
diff --git a/components/content_settings/core/browser/cookie_settings.cc b/components/content_settings/core/browser/cookie_settings.cc
index 8bd265d32a77b..8ae284e68bfac 100644
--- a/components/content_settings/core/browser/cookie_settings.cc
+++ b/components/content_settings/core/browser/cookie_settings.cc
@@ -92,10 +92,12 @@ ContentSettingsForOneType CookieSettings::GetCookieSettings() const {
 
 void CookieSettings::RegisterProfilePrefs(
     user_prefs::PrefRegistrySyncable* registry) {
-  registry->RegisterIntegerPref(
-      prefs::kCookieControlsMode,
-      int block_mode_int = CookieControlsMode::kBlockThirdParty;
-      user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
+int default_cookie_mode_value = static_cast<int>(CookieControlsMode::kBlockThirdParty);
+
+    registry->RegisterIntegerPref(
+    prefs::kCookieControlsMode,
+    default_cookie_mode_value,
+    user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
 }
 
 void CookieSettings::SetDefaultCookieSetting(ContentSetting setting) {
diff --git a/components/content_settings/core/browser/host_content_settings_map.cc b/components/content_settings/core/browser/host_content_settings_map.cc
index 8daac1703ef51..5e758a94c6512 100644
--- a/components/content_settings/core/browser/host_content_settings_map.cc
+++ b/components/content_settings/core/browser/host_content_settings_map.cc
@@ -224,6 +224,7 @@ const char* ContentSettingToString(ContentSetting setting) {
   switch (setting) {
     case CONTENT_SETTING_ALLOW:
       return "Allow";
+    case DANK_CONTENT_SETTING_BLOCK:
     case CONTENT_SETTING_BLOCK:
       return "Block";
     case CONTENT_SETTING_ASK:
diff --git a/components/content_settings/core/common/content_settings.h b/components/content_settings/core/common/content_settings.h
index a979fc75a321a..95eae849a8fd6 100644
--- a/components/content_settings/core/common/content_settings.h
+++ b/components/content_settings/core/common/content_settings.h
@@ -34,17 +34,8 @@ enum ContentSetting {
   CONTENT_SETTING_ASK,
   CONTENT_SETTING_SESSION_ONLY,
   CONTENT_SETTING_DETECT_IMPORTANT_CONTENT,
-  CONTENT_SETTING_NUM_SETTINGS
-};
-
-enum DankContentSetting {
-  DANK_CONTENT_SETTING_DEFAULT = 0,
-  DANK_CONTENT_SETTING_ALLOW,
   DANK_CONTENT_SETTING_BLOCK,
-  DANK_CONTENT_SETTING_ASK,
-  DANK_CONTENT_SETTING_SESSION_ONLY,
-  DANK_CONTENT_SETTING_DETECT_IMPORTANT_CONTENT,
-  DANK_CONTENT_SETTING_NUM_SETTINGS
+  CONTENT_SETTING_NUM_SETTINGS
 };
 
 // Range-checked conversion of an int to a ContentSetting, for use when reading
diff --git a/components/content_settings/core/common/content_settings.mojom b/components/content_settings/core/common/content_settings.mojom
index 079df52ce3550..ee36b4edff11f 100644
--- a/components/content_settings/core/common/content_settings.mojom
+++ b/components/content_settings/core/common/content_settings.mojom
@@ -57,6 +57,7 @@ enum ContentSetting {
   ASK,
   SESSION_ONLY,
   DETECT_IMPORTANT_CONTENT,
+  DANK_BLOCK,
 };
 
 // This mirrors the C++ type in content_settings_metadata.h.
diff --git a/components/content_settings/core/common/content_settings_mojom_traits.cc b/components/content_settings/core/common/content_settings_mojom_traits.cc
index 64b9fcefb33d7..b8e1010f4073d 100644
--- a/components/content_settings/core/common/content_settings_mojom_traits.cc
+++ b/components/content_settings/core/common/content_settings_mojom_traits.cc
@@ -39,6 +39,7 @@ EnumTraits<content_settings::mojom::ContentSetting, ContentSetting>::ToMojom(
       return content_settings::mojom::ContentSetting::DEFAULT;
     case CONTENT_SETTING_ALLOW:
       return content_settings::mojom::ContentSetting::ALLOW;
+    case DANK_CONTENT_SETTING_BLOCK:
     case CONTENT_SETTING_BLOCK:
       return content_settings::mojom::ContentSetting::BLOCK;
     case CONTENT_SETTING_ASK:
@@ -77,6 +78,9 @@ bool EnumTraits<content_settings::mojom::ContentSetting, ContentSetting>::
     case content_settings::mojom::ContentSetting::DETECT_IMPORTANT_CONTENT:
       *out = CONTENT_SETTING_DETECT_IMPORTANT_CONTENT;
       return true;
+    case content_settings::mojom::ContentSetting::DANK_BLOCK:
+      *out = DANK_CONTENT_SETTING_BLOCK;
+      return true;
   }
   return false;
 }
diff --git a/components/omnibox/browser/location_bar_model_util.cc b/components/omnibox/browser/location_bar_model_util.cc
index 8f467ed6b5913..4c9149c42d658 100644
--- a/components/omnibox/browser/location_bar_model_util.cc
+++ b/components/omnibox/browser/location_bar_model_util.cc
@@ -32,6 +32,7 @@ const gfx::VectorIcon& GetSecurityVectorIcon(
       return omnibox::kSecurePageInfoChromeRefreshIcon;
     case security_state::WARNING:
       return vector_icons::kNotSecureWarningChromeRefreshIcon;
+    case security_state::NONDANK:
     case security_state::DANGEROUS:
       if (malicious_content_status ==
               security_state::MALICIOUS_CONTENT_STATUS_MANAGED_POLICY_WARN ||
diff --git a/components/page_info/page_info_ui.cc b/components/page_info/page_info_ui.cc
index 650024718da08..63d11e5620486 100644
--- a/components/page_info/page_info_ui.cc
+++ b/components/page_info/page_info_ui.cc
@@ -66,6 +66,7 @@ const int kPermissionButtonTextIDPolicyManaged[] = {
     IDS_PAGE_INFO_PERMISSION_BLOCKED_BY_POLICY,
     IDS_PAGE_INFO_PERMISSION_ASK_BY_POLICY,
     kInvalidResourceID,
+    kInvalidResourceID,
     kInvalidResourceID};
 static_assert(std::size(kPermissionButtonTextIDPolicyManaged) ==
                   CONTENT_SETTING_NUM_SETTINGS,
@@ -79,6 +80,7 @@ const int kPermissionButtonTextIDExtensionManaged[] = {
     IDS_PAGE_INFO_PERMISSION_BLOCKED_BY_EXTENSION,
     IDS_PAGE_INFO_PERMISSION_ASK_BY_EXTENSION,
     kInvalidResourceID,
+    kInvalidResourceID,
     kInvalidResourceID};
 static_assert(std::size(kPermissionButtonTextIDExtensionManaged) ==
                   CONTENT_SETTING_NUM_SETTINGS,
@@ -93,7 +95,8 @@ const int kPermissionButtonTextIDUserManaged[] = {
     IDS_PAGE_INFO_BUTTON_TEXT_BLOCKED_BY_USER,
     IDS_PAGE_INFO_BUTTON_TEXT_ASK_BY_USER,
     kInvalidResourceID,
-    IDS_PAGE_INFO_BUTTON_TEXT_DETECT_IMPORTANT_CONTENT_BY_USER};
+    IDS_PAGE_INFO_BUTTON_TEXT_DETECT_IMPORTANT_CONTENT_BY_USER,
+    kInvalidResourceID};
 static_assert(std::size(kPermissionButtonTextIDUserManaged) ==
                   CONTENT_SETTING_NUM_SETTINGS,
               "kPermissionButtonTextIDUserManaged array size is incorrect");
@@ -106,7 +109,8 @@ const int kPermissionButtonTextIDDefaultSetting[] = {
     IDS_PAGE_INFO_BUTTON_TEXT_BLOCKED_BY_DEFAULT,
     IDS_PAGE_INFO_BUTTON_TEXT_ASK_BY_DEFAULT,
     kInvalidResourceID,
-    IDS_PAGE_INFO_BUTTON_TEXT_DETECT_IMPORTANT_CONTENT_BY_DEFAULT};
+    IDS_PAGE_INFO_BUTTON_TEXT_DETECT_IMPORTANT_CONTENT_BY_DEFAULT,
+    kInvalidResourceID};
 static_assert(std::size(kPermissionButtonTextIDDefaultSetting) ==
                   CONTENT_SETTING_NUM_SETTINGS,
               "kPermissionButtonTextIDDefaultSetting array size is incorrect");
@@ -120,6 +124,7 @@ const int kSoundPermissionButtonTextIDUserManaged[] = {
     IDS_PAGE_INFO_BUTTON_TEXT_MUTED_BY_USER,
     kInvalidResourceID,
     kInvalidResourceID,
+    kInvalidResourceID,
     kInvalidResourceID};
 static_assert(
     std::size(kSoundPermissionButtonTextIDUserManaged) ==
@@ -135,6 +140,7 @@ const int kSoundPermissionButtonTextIDDefaultSetting[] = {
     IDS_PAGE_INFO_BUTTON_TEXT_MUTED_BY_DEFAULT,
     kInvalidResourceID,
     kInvalidResourceID,
+    kInvalidResourceID,
     kInvalidResourceID};
 static_assert(
     std::size(kSoundPermissionButtonTextIDDefaultSetting) ==
diff --git a/components/payments/content/ssl_validity_checker.cc b/components/payments/content/ssl_validity_checker.cc
index 1a1ba1df4280f..e5f4530ce8cfb 100644
--- a/components/payments/content/ssl_validity_checker.cc
+++ b/components/payments/content/ssl_validity_checker.cc
@@ -37,6 +37,7 @@ std::string SslValidityChecker::GetInvalidSslCertificateErrorMessage(
     case security_state::WARNING:
       level = "WARNING";
       break;
+    case security_state::NONDANK:
     case security_state::DANGEROUS:
       level = "DANGEROUS";
       break;
diff --git a/components/permissions/permission_util.cc b/components/permissions/permission_util.cc
index 0aae1d3b2777d..e1237576de273 100644
--- a/components/permissions/permission_util.cc
+++ b/components/permissions/permission_util.cc
@@ -547,6 +547,7 @@ blink::mojom::PermissionStatus PermissionUtil::ContentSettingToPermissionStatus(
   switch (setting) {
     case CONTENT_SETTING_ALLOW:
       return blink::mojom::PermissionStatus::GRANTED;
+    case DANK_CONTENT_SETTING_BLOCK:
     case CONTENT_SETTING_BLOCK:
       return blink::mojom::PermissionStatus::DENIED;
     case CONTENT_SETTING_ASK:
diff --git a/components/security_state/core/security_state.cc b/components/security_state/core/security_state.cc
index 2436597f22249..b7a5a4ce81bf8 100644
--- a/components/security_state/core/security_state.cc
+++ b/components/security_state/core/security_state.cc
@@ -29,9 +29,9 @@ std::string GetHistogramSuffixForSecurityLevel(
       return "NONE";
     case WARNING:
       return "WARNING";
-    case DANGEROUS:
-      return "DANGEROUS";
     case NONDANK:
+      [[fallthrough]];
+    case DANGEROUS:
       return "DANGEROUS";
     default:
       return "OTHER";
diff --git a/components/security_state/core/security_state.h b/components/security_state/core/security_state.h
index 0e866065da47b..2e574fe1f0e34 100644
--- a/components/security_state/core/security_state.h
+++ b/components/security_state/core/security_state.h
@@ -68,7 +68,7 @@ enum SecurityLevel {
   // insecure active content on the page, malware, phishing, or any other
   // serious security issue that could be dangerous.
   DANGEROUS = 5,
-  NONDANK = 5,
+  NONDANK = 69,
 
   // Pages deemed insecure, where we should show a warning indicator. This
   // includes HTTP pages (previously these were HTTP_SHOW_WARNING) and cases
diff --git a/components/variations/service/variations_field_trial_creator_base.cc b/components/variations/service/variations_field_trial_creator_base.cc
index 49902902081c5..d5b5fb349017b 100644
--- a/components/variations/service/variations_field_trial_creator_base.cc
+++ b/components/variations/service/variations_field_trial_creator_base.cc
@@ -303,7 +303,6 @@ bool VariationsFieldTrialCreatorBase::SetUpFieldTrials(
   // instance is set.
   feature_list->RegisterExtraFeatureOverrides(extra_overrides);
 
-  bool used_testing_config = false;
   // TODO(crbug.com/40230862): Remove this code path.
 #if BUILDFLAG(FIELDTRIAL_TESTING_ENABLED)
   if (ShouldUseFieldTrialTestingConfig(command_line)) {
-- 
2.43.0

