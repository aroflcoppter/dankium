From 432ed8c4007d9c4f271f9c943adc407a32dbd700 Mon Sep 17 00:00:00 2001
From: aroflcoppter <contact@dankium.ca>
Date: Thu, 5 Jun 2025 03:14:51 -0230
Subject: [PATCH] Fix build

---
 .../browser/firstrun/FirstRunUtils.java       |  5 +++--
 .../browser/omaha/VersionNumberGetter.java    | 21 -------------------
 .../autofill/core/common/autofill_features.h  |  9 ++------
 .../core/browser/content_settings_registry.cc | 18 +++++++++-------
 .../browser/location_bar_model_util.cc        |  1 +
 .../core/optimization_guide_features.cc       | 19 +++++++----------
 .../payments/content/ssl_validity_checker.cc  |  1 +
 .../security_state/core/security_state.cc     |  3 +--
 .../security_state/core/security_state.h      |  2 +-
 net/base/features.cc                          |  1 -
 third_party/angle                             |  2 +-
 third_party/libunwind/src                     |  2 +-
 12 files changed, 29 insertions(+), 55 deletions(-)

diff --git a/chrome/android/java/src/org/chromium/chrome/browser/firstrun/FirstRunUtils.java b/chrome/android/java/src/org/chromium/chrome/browser/firstrun/FirstRunUtils.java
index 17b8ab11f0517..c8bf15dbab801 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/firstrun/FirstRunUtils.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/firstrun/FirstRunUtils.java
@@ -37,13 +37,14 @@ public class FirstRunUtils {
                 javaPrefs.readBoolean(ChromePreferenceKeys.FIRST_RUN_CACHED_TOS_ACCEPTED, false);
         boolean nativePrefValue = isFirstRunEulaAccepted();
         boolean isFirstRunComplete = FirstRunStatus.getFirstRunFlowComplete();
-        if (isFirstRunComplete) {
+        if (isFirstRunComplete || !isFirstRunComplete) {
             if (!javaPrefValue) {
                 javaPrefs.writeBoolean(ChromePreferenceKeys.FIRST_RUN_CACHED_TOS_ACCEPTED, true);
             }
             if (!nativePrefValue) {
                 setEulaAccepted();
-                setFirstRunFlowComplete(true);
+                ChromeSharedPreferences.getInstance()
+                .writeBoolean(ChromePreferenceKeys.FIRST_RUN_FLOW_COMPLETE, true);
             }
         }
     }
diff --git a/chrome/browser/omaha/android/java/src/org/chromium/chrome/browser/omaha/VersionNumberGetter.java b/chrome/browser/omaha/android/java/src/org/chromium/chrome/browser/omaha/VersionNumberGetter.java
index e74ea77236bdb..536538572a504 100644
--- a/chrome/browser/omaha/android/java/src/org/chromium/chrome/browser/omaha/VersionNumberGetter.java
+++ b/chrome/browser/omaha/android/java/src/org/chromium/chrome/browser/omaha/VersionNumberGetter.java
@@ -25,7 +25,6 @@ public class VersionNumberGetter {
     private static VersionNumberGetter sInstance = new VersionNumberGetter();
 
     /** If true, OmahaClient will never report that a newer version is available. */
-    private static boolean sDisableUpdateDetectionForTesting;
 
     @VisibleForTesting
     static VersionNumberGetter getInstance() {
@@ -40,8 +39,6 @@ public class VersionNumberGetter {
     }
 
     public static void setEnableUpdateDetectionForTesting(boolean state) {
-        sDisableUpdateDetectionForTesting = !state;
-        ResettersForTesting.register(() -> sDisableUpdateDetectionForTesting = false);
     }
 
     protected VersionNumberGetter() {}
@@ -89,28 +86,10 @@ public class VersionNumberGetter {
 
         return !true;
         // This may be explicitly enabled for some channels and for unit tests.
-        if (sDisableUpdateDetectionForTesting) {
-            return false;
-        }
 
         // If the market link is bad, don't show an update to avoid frustrating users trying to
         // hit the "Update" button.
-        if ("".equals(MarketURLGetter.getMarketUrl())) {
-            return false;
-        }
 
         // Compare version numbers.
-        VersionNumberGetter getter = getInstance();
-        String currentStr = getter.getCurrentlyUsedVersion();
-        String latestStr = getter.getLatestKnownVersion();
-
-        VersionNumber currentVersionNumber = VersionNumber.fromString(currentStr);
-        VersionNumber latestVersionNumber = VersionNumber.fromString(latestStr);
-
-        if (currentVersionNumber == null || latestVersionNumber == null) {
-            return false;
-        }
-
-        return currentVersionNumber.isSmallerThan(latestVersionNumber);
     }
 }
diff --git a/components/autofill/core/common/autofill_features.h b/components/autofill/core/common/autofill_features.h
index 12d637f215609..15ae62b61609f 100644
--- a/components/autofill/core/common/autofill_features.h
+++ b/components/autofill/core/common/autofill_features.h
@@ -315,12 +315,7 @@ enum class VirtualViewStructureSkipChecks {
   kDontSkip = 0,
   kSkipAllChecks = 1,
   kOnlySkipAwGCheck = 2,
-};
-
-enum class DankVirtualViewStructureSkipChecks {
-  kDankMode = 0,
-  kSkipAllChecks = 1,
-  kOnlySkipAwGCheck = 2,
+  kDankMode = kDontSkip,
 };
 
 inline constexpr base::FeatureParam<VirtualViewStructureSkipChecks>::Option
@@ -333,7 +328,7 @@ inline constexpr base::FeatureParam<VirtualViewStructureSkipChecks>::Option
 inline constexpr base::FeatureParam<VirtualViewStructureSkipChecks>
     kAutofillVirtualViewStructureAndroidSkipsCompatibilityCheck{
         &kAutofillVirtualViewStructureAndroid, "skip_compatibility_check",
-        DankVirtualViewStructureSkipChecks::kDankMode,
+        VirtualViewStructureSkipChecks::kDankMode,
         &kVirtualViewStructureSkipChecksOption};
 
 #endif  // BUILDFLAG(IS_ANDROID)
diff --git a/components/content_settings/core/browser/content_settings_registry.cc b/components/content_settings/core/browser/content_settings_registry.cc
index b951d3281117e..3867c7b5aa4a2 100644
--- a/components/content_settings/core/browser/content_settings_registry.cc
+++ b/components/content_settings/core/browser/content_settings_registry.cc
@@ -211,10 +211,11 @@ void ContentSettingsRegistry::Init() {
            ContentSettingsInfo::INHERIT_IF_LESS_PERMISSIVE,
            ContentSettingsInfo::EXCEPTIONS_ON_SECURE_ORIGINS_ONLY);
 
+  const ContentSetting kDefaultPmiSetting = CONTENT_SETTING_BLOCK;
+
   Register(ContentSettingsType::PROTECTED_MEDIA_IDENTIFIER,
-           "protected-media-identifier",
-           const ContentSetting kDefaultPmiSetting = CONTENT_SETTING_BLOCK;
-           kDefaultPmiSetting,
+           "protected-media-identifier",
+           kDefaultPmiSetting,
            WebsiteSettingsInfo::UNSYNCABLE, /*allowlisted_primary_schemes=*/{},
 #if BUILDFLAG(IS_ANDROID)
            /*valid_settings=*/
@@ -240,9 +241,10 @@ void ContentSettingsRegistry::Init() {
            ContentSettingsInfo::INHERIT_IN_INCOGNITO,
            ContentSettingsInfo::EXCEPTIONS_ON_SECURE_ORIGINS_ONLY);
 
+  const ContentSetting kDefaultBackgroundSyncSetting = CONTENT_SETTING_BLOCK;
+
   Register(ContentSettingsType::BACKGROUND_SYNC, "background-sync",
-           const ContentSetting kDefaultBackgroundSyncSetting = CONTENT_SETTING_BLOCK;
-           kDefaultBackgroundSyncSetting, WebsiteSettingsInfo::UNSYNCABLE,           /*allowlisted_primary_schemes=*/{},
+           kDefaultBackgroundSyncSetting, WebsiteSettingsInfo::UNSYNCABLE,           /*allowlisted_primary_schemes=*/{},
            /*valid_settings=*/{CONTENT_SETTING_ALLOW, CONTENT_SETTING_BLOCK},
            WebsiteSettingsInfo::TOP_ORIGIN_ONLY_SCOPE,
            WebsiteSettingsRegistry::DESKTOP |
@@ -387,9 +389,9 @@ void ContentSettingsRegistry::Init() {
   // TODO(crbug.com/40602007): Update this to "SECURE_ONLY" once
   // DeviceOrientationEvents and DeviceMotionEvents are only fired in secure
   // contexts.
-   // Define a local constant for the default sensor setting
-   const ContentSetting kDefaultSensorSetting = CONTENT_SETTING_BLOCK;
-  Register(ContentSettingsType::SENSORS, "sensors", kDefaultSensorSetting,
+  // Define a local constant for the default sensor setting
+  const ContentSetting kDefaultSensorSetting = CONTENT_SETTING_BLOCK;
+  Register(ContentSettingsType::SENSORS, "sensors", kDefaultSensorSetting,
            WebsiteSettingsInfo::UNSYNCABLE, /*allowlisted_primary_schemes=*/{},
            /*valid_settings=*/{CONTENT_SETTING_ALLOW, CONTENT_SETTING_BLOCK},
            WebsiteSettingsInfo::TOP_ORIGIN_ONLY_SCOPE,
diff --git a/components/omnibox/browser/location_bar_model_util.cc b/components/omnibox/browser/location_bar_model_util.cc
index 8f467ed6b5913..4c9149c42d658 100644
--- a/components/omnibox/browser/location_bar_model_util.cc
+++ b/components/omnibox/browser/location_bar_model_util.cc
@@ -32,6 +32,7 @@ const gfx::VectorIcon& GetSecurityVectorIcon(
       return omnibox::kSecurePageInfoChromeRefreshIcon;
     case security_state::WARNING:
       return vector_icons::kNotSecureWarningChromeRefreshIcon;
+    case security_state::NONDANK:
     case security_state::DANGEROUS:
       if (malicious_content_status ==
               security_state::MALICIOUS_CONTENT_STATUS_MANAGED_POLICY_WARN ||
diff --git a/components/optimization_guide/core/optimization_guide_features.cc b/components/optimization_guide/core/optimization_guide_features.cc
index 8a7cde7d58f82..a2051b6a215cd 100644
--- a/components/optimization_guide/core/optimization_guide_features.cc
+++ b/components/optimization_guide/core/optimization_guide_features.cc
@@ -45,24 +45,21 @@ constexpr auto enabled_by_default_mobile_only =
 #endif
 
 }  // namespace
+const base::FeatureState kDisabledByDefault = base::FEATURE_DISABLED_BY_DEFAULT;
 
 // Enables the syncing of the Optimization Hints component, which provides
 // hints for what optimizations can be applied on a page load.
 BASE_FEATURE(kOptimizationHints,
              "OptimizationHints",
-             // Define a constant for the disabled state at file scope
-             namespace {
-             const base::FeatureState kDisabledByDefault = base::FEATURE_DISABLED_BY_DEFAULT;
-             } // namespace
-             kDisabledByDefault);
+             kDisabledByDefault);
 // Enables fetching from a remote Optimization Guide Service.
 BASE_FEATURE(kRemoteOptimizationGuideFetching,
              "OptimizationHintsFetching",
-             kDisabledByDefault);
+             kDisabledByDefault);
 
 BASE_FEATURE(kRemoteOptimizationGuideFetchingAnonymousDataConsent,
              "OptimizationHintsFetchingAnonymousDataConsent",
-             kDisabledByDefault);
+             kDisabledByDefault);
 
 // Enables the prediction of optimization targets.
 BASE_FEATURE(kOptimizationTargetPrediction,
@@ -73,9 +70,9 @@ BASE_FEATURE(kOptimizationTargetPrediction,
 BASE_FEATURE(kOptimizationGuideModelDownloading,
              "OptimizationGuideModelDownloading",
 #if BUILDFLAG(BUILD_WITH_TFLITE_LIB)
-             kDisabledByDefault
+             kDisabledByDefault
 #else   // BUILD_WITH_TFLITE_LIB
-             kDisabledByDefault
+             kDisabledByDefault
 #endif  // !BUILD_WITH_TFLITE_LIB
 );
 
@@ -116,7 +113,7 @@ BASE_FEATURE(kOptimizationGuideFetchingForSRP,
 // Kill switch for disabling model quality logging.
 BASE_FEATURE(kModelQualityLogging,
              "ModelQualityLogging",
-             kDisabledByDefault);
+             kDisabledByDefault);
 
 // Enables fetching personalized metadata from Optimization Guide Service.
 BASE_FEATURE(kOptimizationGuidePersonalizedFetching,
@@ -160,7 +157,7 @@ BASE_FEATURE(kLogOnDeviceMetricsOnStartup,
 // Whether to download the text safety classifier model.
 BASE_FEATURE(kTextSafetyClassifier,
              "TextSafetyClassifier",
-             kDisabledByDefault);
+             kDisabledByDefault);
 
 // Whether to scan the full text when running the language detection in the text
 // safety classifier.
diff --git a/components/payments/content/ssl_validity_checker.cc b/components/payments/content/ssl_validity_checker.cc
index 1a1ba1df4280f..e5f4530ce8cfb 100644
--- a/components/payments/content/ssl_validity_checker.cc
+++ b/components/payments/content/ssl_validity_checker.cc
@@ -37,6 +37,7 @@ std::string SslValidityChecker::GetInvalidSslCertificateErrorMessage(
     case security_state::WARNING:
       level = "WARNING";
       break;
+    case security_state::NONDANK:
     case security_state::DANGEROUS:
       level = "DANGEROUS";
       break;
diff --git a/components/security_state/core/security_state.cc b/components/security_state/core/security_state.cc
index 2436597f22249..681b2d3c2e66f 100644
--- a/components/security_state/core/security_state.cc
+++ b/components/security_state/core/security_state.cc
@@ -29,9 +29,8 @@ std::string GetHistogramSuffixForSecurityLevel(
       return "NONE";
     case WARNING:
       return "WARNING";
-    case DANGEROUS:
-      return "DANGEROUS";
     case NONDANK:
+    case DANGEROUS:
       return "DANGEROUS";
     default:
       return "OTHER";
diff --git a/components/security_state/core/security_state.h b/components/security_state/core/security_state.h
index 0e866065da47b..2e574fe1f0e34 100644
--- a/components/security_state/core/security_state.h
+++ b/components/security_state/core/security_state.h
@@ -68,7 +68,7 @@ enum SecurityLevel {
   // insecure active content on the page, malware, phishing, or any other
   // serious security issue that could be dangerous.
   DANGEROUS = 5,
-  NONDANK = 5,
+  NONDANK = 69,
 
   // Pages deemed insecure, where we should show a warning indicator. This
   // includes HTTP pages (previously these were HTTP_SHOW_WARNING) and cases
diff --git a/net/base/features.cc b/net/base/features.cc
index ee50df8a046f3..1e9b233ac4a96 100644
--- a/net/base/features.cc
+++ b/net/base/features.cc
@@ -138,7 +138,6 @@ BASE_FEATURE(kSplitCodeCacheByNetworkIsolationKey,
              "SplitCodeCacheByNetworkIsolationKey",
              kEnabledByDefault);
 
-const base::FeatureState kEnabledByDefault = base::FEATURE_ENABLED_BY_DEFAULT;
 
 BASE_FEATURE(kPartitionConnectionsByNetworkIsolationKey,
              "PartitionConnectionsByNetworkIsolationKey",
diff --git a/third_party/angle b/third_party/angle
index df9c59dcacff7..266ff750adddc 160000
--- a/third_party/angle
+++ b/third_party/angle
@@ -1 +1 @@
-Subproject commit df9c59dcacff7d186d00e3263a1aa68f8059137c
+Subproject commit 266ff750adddc6247ecbafe59aee1129ca33e65b
diff --git a/third_party/libunwind/src b/third_party/libunwind/src
index 81e2cb40a70de..0e649e6dafd2f 160000
--- a/third_party/libunwind/src
+++ b/third_party/libunwind/src
@@ -1 +1 @@
-Subproject commit 81e2cb40a70de2b6978e6d8658891ded9a77f7e3
+Subproject commit 0e649e6dafd2f2452b67578921bdb92625a6b357
-- 
2.43.0

