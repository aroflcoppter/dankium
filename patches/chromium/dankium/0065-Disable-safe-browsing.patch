From fd0f175bdae937e366a68b250f5f3484e62686b7 Mon Sep 17 00:00:00 2001
From: aroflcoppter <contact@dankium.ca>
Date: Thu, 5 Jun 2025 04:18:25 -0230
Subject: [PATCH] Disable safe browsing

---
 .../download_ui_safe_browsing_util.cc         | 71 +------------------
 .../download/download_danger_prompt_views.cc  |  8 ---
 .../webui/downloads/downloads_dom_handler.cc  |  6 --
 .../core/common/safe_browsing_prefs.cc        |  4 +-
 4 files changed, 4 insertions(+), 85 deletions(-)

diff --git a/chrome/browser/download/download_ui_safe_browsing_util.cc b/chrome/browser/download/download_ui_safe_browsing_util.cc
index 04266cbf80aa5..1f88830159e9a 100644
--- a/chrome/browser/download/download_ui_safe_browsing_util.cc
+++ b/chrome/browser/download/download_ui_safe_browsing_util.cc
@@ -13,92 +13,25 @@
 #include "components/safe_browsing/core/common/features.h"
 #include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 
-#if BUILDFLAG(SAFE_BROWSING_DOWNLOAD_PROTECTION)
-#include "chrome/browser/browser_process.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_service.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#endif
-
-#if BUILDFLAG(SAFE_BROWSING_AVAILABLE)
-#include "components/safe_browsing/content/common/file_type_policies.h"
-#endif
-
-namespace {
-
-#if BUILDFLAG(SAFE_BROWSING_DOWNLOAD_PROTECTION)
-using safe_browsing::ClientDownloadResponse;
-using safe_browsing::ClientSafeBrowsingReportRequest;
-#endif
-
-std::string GetDangerPromptHistogramName(const std::string& suffix,
-                                         const download::DownloadItem& item) {
-  const char kPrefix[] = "Download.DownloadDangerPrompt";
-  download::DownloadDangerType danger_type = item.GetDangerType();
-  return base::StringPrintf("%s.%s.%s", kPrefix,
-                            download::GetDownloadDangerTypeString(danger_type),
-                            // "Proceed" or "Shown".
-                            suffix.c_str());
-}
-
-}  // namespace
-
 bool WasSafeBrowsingVerdictObtained(const download::DownloadItem* item) {
-#if BUILDFLAG(SAFE_BROWSING_DOWNLOAD_PROTECTION)
-  return item &&
-         safe_browsing::DownloadProtectionService::HasDownloadProtectionVerdict(
-             item);
-#else
   return false;
-#endif
 }
 
 bool ShouldShowWarningForNoSafeBrowsing(Profile* profile) {
-#if BUILDFLAG(SAFE_BROWSING_AVAILABLE)
-  return safe_browsing::GetSafeBrowsingState(*profile->GetPrefs()) ==
-         safe_browsing::SafeBrowsingState::NO_SAFE_BROWSING;
-#else
-  return true;
-#endif
+  return false;
 }
 
 bool CanUserTurnOnSafeBrowsing(Profile* profile) {
-#if BUILDFLAG(SAFE_BROWSING_AVAILABLE)
-  return !safe_browsing::IsSafeBrowsingPolicyManaged(*profile->GetPrefs());
-#else
   return false;
-#endif
 }
 
 void RecordDownloadDangerPromptHistogram(
     const std::string& proceed_or_shown_suffix,
     const download::DownloadItem& item) {
-#if BUILDFLAG(SAFE_BROWSING_AVAILABLE)
-  int64_t file_type_uma_value =
-      safe_browsing::FileTypePolicies::GetInstance()->UmaValueForFile(
-          item.GetTargetFilePath());
-  base::UmaHistogramSparse(
-      GetDangerPromptHistogramName(proceed_or_shown_suffix, item),
-      file_type_uma_value);
-#endif
-}
-
-#if BUILDFLAG(SAFE_BROWSING_DOWNLOAD_PROTECTION)
-void SendSafeBrowsingDownloadReport(
-    ClientSafeBrowsingReportRequest::ReportType report_type,
-    bool did_proceed,
-    download::DownloadItem* item) {
-  if (safe_browsing::SafeBrowsingService* sb_service =
-          g_browser_process->safe_browsing_service()) {
-    sb_service->SendDownloadReport(item, report_type, did_proceed,
-                                   /*show_download_in_folder=*/std::nullopt);
-  }
 }
-#endif  // BUILDFLAG(SAFE_BROWSING_DOWNLOAD_PROTECTION)
 
 #if BUILDFLAG(IS_ANDROID)
 bool ShouldShowSafeBrowsingAndroidDownloadWarnings() {
-  return base::FeatureList::IsEnabled(
-             safe_browsing::kMaliciousApkDownloadCheck) &&
-         !safe_browsing::kMaliciousApkDownloadCheckTelemetryOnly.Get();
+  return false;
 }
 #endif
diff --git a/chrome/browser/ui/views/download/download_danger_prompt_views.cc b/chrome/browser/ui/views/download/download_danger_prompt_views.cc
index c222109c93fef..1131a3b361c3e 100644
--- a/chrome/browser/ui/views/download/download_danger_prompt_views.cc
+++ b/chrome/browser/ui/views/download/download_danger_prompt_views.cc
@@ -222,14 +222,6 @@ void DownloadDangerPromptViews::RunDone(Action action) {
         RecordDownloadDangerPromptHistogram("Proceed", *download_);
       }
       RecordDownloadWarningEvent(action, download_);
-#if BUILDFLAG(SAFE_BROWSING_AVAILABLE)
-      // Do not send cancel report since it's not a terminal action.
-      if (accept) {
-        SendSafeBrowsingDownloadReport(
-            ClientSafeBrowsingReportRequest::DANGEROUS_DOWNLOAD_BY_API, accept,
-            download_);
-      }
-#endif
     }
     download_->RemoveObserver(this);
     download_ = nullptr;
diff --git a/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc b/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc
index a7cbec4927cfe..8384c56e89380 100644
--- a/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc
+++ b/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc
@@ -158,12 +158,6 @@ void MaybeReportBypassAction(download::DownloadItem* file,
   if (action != WarningAction::PROCEED && action != WarningAction::DISCARD) {
     return;
   }
-#if BUILDFLAG(SAFE_BROWSING_AVAILABLE)
-  SendSafeBrowsingDownloadReport(
-      safe_browsing::ClientSafeBrowsingReportRequest::
-          DANGEROUS_DOWNLOAD_RECOVERY,
-      /*did_proceed=*/action == WarningAction::PROCEED, file);
-#endif
 }
 
 // Triggers a Trust and Safety sentiment survey (if enabled). Should be called
diff --git a/components/safe_browsing/core/common/safe_browsing_prefs.cc b/components/safe_browsing/core/common/safe_browsing_prefs.cc
index 90ec1b9162127..e444aabdfc370 100644
--- a/components/safe_browsing/core/common/safe_browsing_prefs.cc
+++ b/components/safe_browsing/core/common/safe_browsing_prefs.cc
@@ -211,13 +211,13 @@ void RegisterProfilePrefs(PrefRegistrySimple* registry) {
   registry->RegisterBooleanPref(
       prefs::kSafeBrowsingSawInterstitialScoutReporting, false);
   registry->RegisterBooleanPref(
-      prefs::kSafeBrowsingExtendedReportingOptInAllowed, true);
+      prefs::kSafeBrowsingExtendedReportingOptInAllowed, !true);
   registry->RegisterTimePref(
       prefs::kSafeBrowsingEsbProtegoPingWithTokenLastLogTime, base::Time());
   registry->RegisterTimePref(
       prefs::kSafeBrowsingEsbProtegoPingWithoutTokenLastLogTime, base::Time());
   registry->RegisterBooleanPref(
-      prefs::kSafeBrowsingEnabled, true,
+      prefs::kSafeBrowsingEnabled, !true,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
   if (base::FeatureList::IsEnabled(kEsbAsASyncedSetting)) {
     registry->RegisterBooleanPref(
-- 
2.43.0

